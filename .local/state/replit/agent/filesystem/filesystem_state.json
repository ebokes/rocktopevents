{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Event Management Platform\n\n## Overview\n\nThis is a full-stack event management platform called \"ROCKTOP PREMIUM EVENTS\" that provides professional event planning services. The application allows users to browse services, explore venues, view galleries, read blog posts, request quotes, and contact the company. It features a comprehensive admin dashboard for managing quotes, blog posts, gallery items, and venues.\n\nThe platform is built with a modern tech stack including React frontend, Express.js backend, PostgreSQL database with Drizzle ORM, and implements Replit authentication for user management.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework**: React 18 with TypeScript using Vite as the build tool\n- **UI Library**: Radix UI components with Tailwind CSS for styling\n- **Routing**: Wouter for client-side routing\n- **State Management**: TanStack Query for server state management and caching\n- **Form Handling**: React Hook Form with Zod for validation\n- **Design System**: shadcn/ui component library with custom color scheme\n\n### Backend Architecture\n- **Framework**: Express.js with TypeScript in ESM mode\n- **Session Management**: Express sessions with PostgreSQL storage\n- **API Design**: RESTful endpoints with comprehensive error handling\n- **File Structure**: Separate route handlers and storage layer for clean separation of concerns\n- **Development Tools**: Hot reloading with Vite integration in development\n\n### Database Layer\n- **Database**: PostgreSQL with connection pooling via Neon serverless\n- **ORM**: Drizzle ORM for type-safe database operations\n- **Schema Management**: Centralized schema definitions with TypeScript types\n- **Data Models**: Users, quote requests, contact messages, blog posts, gallery items, venues, and sessions\n\n### Authentication & Authorization\n- **Provider**: Simple admin authentication with hardcoded credentials\n- **Admin Credentials**: Username: \"admin\", Password: \"rocktop@1@2\"\n- **Session Storage**: Express session middleware with memory store\n- **Security**: HTTP-only cookies with secure settings for production\n- **Access Control**: Admin-only access for site management (quotes, content, analytics)\n\n### Content Management\n- **Quote System**: Multi-step quote request form with service selection and status tracking\n- **Blog Management**: Full CRUD operations for blog posts with category filtering and publishing workflow\n- **Gallery System**: Image management with category-based organization\n- **Venue Directory**: Searchable venue listings with filtering capabilities\n\n### UI/UX Design\n- **Responsive Design**: Mobile-first approach with Tailwind CSS breakpoints\n- **Component Library**: Consistent design system using Radix UI primitives\n- **Accessibility**: ARIA labels and semantic HTML structure\n- **Interactive Elements**: Form validation, loading states, and user feedback\n\n### Development Workflow\n- **Build Process**: Vite for frontend bundling, esbuild for backend compilation\n- **Type Safety**: Full TypeScript coverage with strict compiler settings\n- **Code Organization**: Feature-based structure with shared utilities and components\n\n## External Dependencies\n\n### Core Technologies\n- **@neondatabase/serverless**: PostgreSQL database connection for serverless environments\n- **drizzle-orm**: Type-safe ORM for database operations\n- **drizzle-zod**: Integration between Drizzle and Zod for schema validation\n\n### Authentication & Security\n- **express-session**: Session management for admin authentication\n- **Simple Admin Auth**: Custom authentication system for site management\n\n### Frontend Libraries\n- **@tanstack/react-query**: Server state management and caching\n- **react-hook-form**: Form handling and validation\n- **@hookform/resolvers**: Validation resolvers for React Hook Form\n- **wouter**: Lightweight React router\n- **@radix-ui/***: Accessible UI component primitives\n- **tailwindcss**: Utility-first CSS framework\n\n### Utility Libraries\n- **zod**: TypeScript-first schema validation\n- **date-fns**: Date utility library\n- **class-variance-authority**: Utility for managing component variants\n- **clsx**: Conditional CSS class utility\n\n### Development Tools\n- **vite**: Frontend build tool and development server\n- **typescript**: Static type checking\n- **eslint**: Code linting and formatting\n- **@replit/vite-plugin-runtime-error-modal**: Development error handling","size_bytes":4462},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      fontFamily: {\n        sans: ['Inter', 'sans-serif'],\n        serif: ['Georgia', 'serif'],\n        mono: ['Fira Code', 'monospace'],\n      },\n      colors: {\n        background: \"hsl(var(--background))\",\n        foreground: \"hsl(var(--foreground))\",\n        card: {\n          DEFAULT: \"hsl(var(--card))\",\n          foreground: \"hsl(var(--card-foreground))\",\n        },\n        popover: {\n          DEFAULT: \"hsl(var(--popover))\",\n          foreground: \"hsl(var(--popover-foreground))\",\n        },\n        primary: {\n          DEFAULT: \"hsl(var(--primary))\",\n          foreground: \"hsl(var(--primary-foreground))\",\n        },\n        secondary: {\n          DEFAULT: \"hsl(var(--secondary))\",\n          foreground: \"hsl(var(--secondary-foreground))\",\n        },\n        muted: {\n          DEFAULT: \"hsl(var(--muted))\",\n          foreground: \"hsl(var(--muted-foreground))\",\n        },\n        accent: {\n          DEFAULT: \"hsl(var(--accent))\",\n          foreground: \"hsl(var(--accent-foreground))\",\n        },\n        destructive: {\n          DEFAULT: \"hsl(var(--destructive))\",\n          foreground: \"hsl(var(--destructive-foreground))\",\n        },\n        border: \"hsl(var(--border))\",\n        input: \"hsl(var(--input))\",\n        ring: \"hsl(var(--ring))\",\n        chart: {\n          \"1\": \"hsl(var(--chart-1))\",\n          \"2\": \"hsl(var(--chart-2))\",\n          \"3\": \"hsl(var(--chart-3))\",\n          \"4\": \"hsl(var(--chart-4))\",\n          \"5\": \"hsl(var(--chart-5))\",\n        },\n        sidebar: {\n          DEFAULT: \"hsl(var(--sidebar))\",\n          foreground: \"hsl(var(--sidebar-foreground))\",\n          primary: \"hsl(var(--sidebar-primary))\",\n          \"primary-foreground\": \"hsl(var(--sidebar-primary-foreground))\",\n          accent: \"hsl(var(--sidebar-accent))\",\n          \"accent-foreground\": \"hsl(var(--sidebar-accent-foreground))\",\n          border: \"hsl(var(--sidebar-border))\",\n          ring: \"hsl(var(--sidebar-ring))\",\n        },\n      },\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2923},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/adminAuth.ts":{"content":"import express from \"express\";\nimport session from \"express-session\";\nimport { storage } from \"./storage\";\n\n// Simple admin credentials\nconst ADMIN_CREDENTIALS = {\n  username: 'admin',\n  password: 'rocktop@1@2'\n};\n\nexport function setupAdminAuth(app: express.Express) {\n  // Setup session middleware\n  app.use(session({\n    secret: process.env.SESSION_SECRET || 'default-secret-key',\n    resave: false,\n    saveUninitialized: false,\n    cookie: {\n      httpOnly: true,\n      secure: false, // Set to true in production with HTTPS\n      maxAge: 24 * 60 * 60 * 1000 // 24 hours\n    }\n  }));\n\n  // Admin login route\n  app.post('/api/admin/login', (req, res) => {\n    const { username, password } = req.body;\n    \n    if (username === ADMIN_CREDENTIALS.username && password === ADMIN_CREDENTIALS.password) {\n      (req.session as any).isAdmin = true;\n      (req.session as any).username = username;\n      res.json({ \n        success: true, \n        user: { username, role: 'admin' } \n      });\n    } else {\n      res.status(401).json({ \n        success: false, \n        message: 'Invalid credentials' \n      });\n    }\n  });\n\n  // Admin logout route\n  app.post('/api/admin/logout', (req, res) => {\n    req.session.destroy((err) => {\n      if (err) {\n        res.status(500).json({ message: 'Failed to logout' });\n      } else {\n        res.json({ success: true });\n      }\n    });\n  });\n\n  // Check admin status route\n  app.get('/api/admin/user', (req, res) => {\n    if ((req.session as any)?.isAdmin) {\n      res.json({ \n        username: (req.session as any).username, \n        role: 'admin' \n      });\n    } else {\n      res.status(401).json({ message: 'Not authenticated' });\n    }\n  });\n}\n\n// Middleware to protect admin routes\nexport function requireAdmin(req: express.Request, res: express.Response, next: express.NextFunction) {\n  if ((req.session as any)?.isAdmin) {\n    next();\n  } else {\n    res.status(401).json({ message: 'Admin access required' });\n  }\n}","size_bytes":1963},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });","size_bytes":482},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/replitAuth.ts":{"content":"import * as client from \"openid-client\";\nimport { Strategy, type VerifyFunction } from \"openid-client/passport\";\n\nimport passport from \"passport\";\nimport session from \"express-session\";\nimport type { Express, RequestHandler } from \"express\";\nimport memoize from \"memoizee\";\nimport connectPg from \"connect-pg-simple\";\nimport { storage } from \"./storage\";\n\nif (!process.env.REPLIT_DOMAINS) {\n  throw new Error(\"Environment variable REPLIT_DOMAINS not provided\");\n}\n\nconst getOidcConfig = memoize(\n  async () => {\n    return await client.discovery(\n      new URL(process.env.ISSUER_URL ?? \"https://replit.com/oidc\"),\n      process.env.REPL_ID!\n    );\n  },\n  { maxAge: 3600 * 1000 }\n);\n\nexport function getSession() {\n  const sessionTtl = 7 * 24 * 60 * 60 * 1000; // 1 week\n  const pgStore = connectPg(session);\n  const sessionStore = new pgStore({\n    conString: process.env.DATABASE_URL,\n    createTableIfMissing: false,\n    ttl: sessionTtl,\n    tableName: \"sessions\",\n  });\n  return session({\n    secret: process.env.SESSION_SECRET!,\n    store: sessionStore,\n    resave: false,\n    saveUninitialized: false,\n    cookie: {\n      httpOnly: true,\n      secure: true,\n      maxAge: sessionTtl,\n    },\n  });\n}\n\nfunction updateUserSession(\n  user: any,\n  tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers\n) {\n  user.claims = tokens.claims();\n  user.access_token = tokens.access_token;\n  user.refresh_token = tokens.refresh_token;\n  user.expires_at = user.claims?.exp;\n}\n\nasync function upsertUser(\n  claims: any,\n) {\n  await storage.upsertUser({\n    id: claims[\"sub\"],\n    email: claims[\"email\"],\n    firstName: claims[\"first_name\"],\n    lastName: claims[\"last_name\"],\n    profileImageUrl: claims[\"profile_image_url\"],\n  });\n}\n\nexport async function setupAuth(app: Express) {\n  app.set(\"trust proxy\", 1);\n  app.use(getSession());\n  app.use(passport.initialize());\n  app.use(passport.session());\n\n  const config = await getOidcConfig();\n\n  const verify: VerifyFunction = async (\n    tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers,\n    verified: passport.AuthenticateCallback\n  ) => {\n    const user = {};\n    updateUserSession(user, tokens);\n    await upsertUser(tokens.claims());\n    verified(null, user);\n  };\n\n  for (const domain of process.env\n    .REPLIT_DOMAINS!.split(\",\")) {\n    const strategy = new Strategy(\n      {\n        name: `replitauth:${domain}`,\n        config,\n        scope: \"openid email profile offline_access\",\n        callbackURL: `https://${domain}/api/callback`,\n      },\n      verify,\n    );\n    passport.use(strategy);\n  }\n\n  passport.serializeUser((user: Express.User, cb) => cb(null, user));\n  passport.deserializeUser((user: Express.User, cb) => cb(null, user));\n\n  app.get(\"/api/login\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      prompt: \"login consent\",\n      scope: [\"openid\", \"email\", \"profile\", \"offline_access\"],\n    })(req, res, next);\n  });\n\n  app.get(\"/api/callback\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      successReturnToOrRedirect: \"/\",\n      failureRedirect: \"/api/login\",\n    })(req, res, next);\n  });\n\n  app.get(\"/api/logout\", (req, res) => {\n    req.logout(() => {\n      res.redirect(\n        client.buildEndSessionUrl(config, {\n          client_id: process.env.REPL_ID!,\n          post_logout_redirect_uri: `${req.protocol}://${req.hostname}`,\n        }).href\n      );\n    });\n  });\n}\n\nexport const isAuthenticated: RequestHandler = async (req, res, next) => {\n  const user = req.user as any;\n\n  if (!req.isAuthenticated() || !user.expires_at) {\n    return res.status(401).json({ message: \"Unauthorized\" });\n  }\n\n  const now = Math.floor(Date.now() / 1000);\n  if (now <= user.expires_at) {\n    return next();\n  }\n\n  const refreshToken = user.refresh_token;\n  if (!refreshToken) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n\n  try {\n    const config = await getOidcConfig();\n    const tokenResponse = await client.refreshTokenGrant(config, refreshToken);\n    updateUserSession(user, tokenResponse);\n    return next();\n  } catch (error) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n};\n","size_bytes":4221},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { setupAdminAuth, requireAdmin } from \"./adminAuth\";\nimport { insertQuoteRequestSchema, insertContactMessageSchema, insertBlogPostSchema, insertGalleryItemSchema, insertVenueSchema } from \"@shared/schema\";\nimport { z } from \"zod\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Setup admin authentication\n  setupAdminAuth(app);\n\n  // Quote request routes\n  app.post(\"/api/quotes\", async (req, res) => {\n    try {\n      const validatedData = insertQuoteRequestSchema.parse(req.body);\n      const quote = await storage.createQuoteRequest(validatedData);\n      res.json(quote);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        res.status(400).json({ message: \"Validation error\", errors: error.errors });\n      } else {\n        console.error(\"Error creating quote request:\", error);\n        res.status(500).json({ message: \"Failed to create quote request\" });\n      }\n    }\n  });\n\n  app.get(\"/api/quotes\", requireAdmin, async (req, res) => {\n    try {\n      const quotes = await storage.getQuoteRequests();\n      res.json(quotes);\n    } catch (error) {\n      console.error(\"Error fetching quotes:\", error);\n      res.status(500).json({ message: \"Failed to fetch quotes\" });\n    }\n  });\n\n  app.get(\"/api/quotes/:id\", requireAdmin, async (req, res) => {\n    try {\n      const quote = await storage.getQuoteRequest(req.params.id);\n      if (!quote) {\n        return res.status(404).json({ message: \"Quote not found\" });\n      }\n      res.json(quote);\n    } catch (error) {\n      console.error(\"Error fetching quote:\", error);\n      res.status(500).json({ message: \"Failed to fetch quote\" });\n    }\n  });\n\n  app.patch(\"/api/quotes/:id/status\", requireAdmin, async (req, res) => {\n    try {\n      const { status, estimatedCost } = req.body;\n      const quote = await storage.updateQuoteRequestStatus(req.params.id, status, estimatedCost);\n      res.json(quote);\n    } catch (error) {\n      console.error(\"Error updating quote status:\", error);\n      res.status(500).json({ message: \"Failed to update quote status\" });\n    }\n  });\n\n  // Contact message routes\n  app.post(\"/api/contact\", async (req, res) => {\n    try {\n      const validatedData = insertContactMessageSchema.parse(req.body);\n      const message = await storage.createContactMessage(validatedData);\n      res.json(message);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        res.status(400).json({ message: \"Validation error\", errors: error.errors });\n      } else {\n        console.error(\"Error creating contact message:\", error);\n        res.status(500).json({ message: \"Failed to send message\" });\n      }\n    }\n  });\n\n  app.get(\"/api/contact\", requireAdmin, async (req, res) => {\n    try {\n      const messages = await storage.getContactMessages();\n      res.json(messages);\n    } catch (error) {\n      console.error(\"Error fetching contact messages:\", error);\n      res.status(500).json({ message: \"Failed to fetch messages\" });\n    }\n  });\n\n  app.patch(\"/api/contact/:id/status\", requireAdmin, async (req, res) => {\n    try {\n      const { status } = req.body;\n      const message = await storage.updateContactMessageStatus(req.params.id, status);\n      res.json(message);\n    } catch (error) {\n      console.error(\"Error updating message status:\", error);\n      res.status(500).json({ message: \"Failed to update message status\" });\n    }\n  });\n\n  // Blog routes\n  app.get(\"/api/blog\", async (req, res) => {\n    try {\n      const published = req.query.published === 'false' ? false : true;\n      const posts = await storage.getBlogPosts(published);\n      res.json(posts);\n    } catch (error) {\n      console.error(\"Error fetching blog posts:\", error);\n      res.status(500).json({ message: \"Failed to fetch blog posts\" });\n    }\n  });\n\n  app.get(\"/api/blog/:slug\", async (req, res) => {\n    try {\n      const post = await storage.getBlogPost(req.params.slug);\n      if (!post) {\n        return res.status(404).json({ message: \"Blog post not found\" });\n      }\n      res.json(post);\n    } catch (error) {\n      console.error(\"Error fetching blog post:\", error);\n      res.status(500).json({ message: \"Failed to fetch blog post\" });\n    }\n  });\n\n  app.post(\"/api/blog\", requireAdmin, async (req, res) => {\n    try {\n      const validatedData = insertBlogPostSchema.parse(req.body);\n      const post = await storage.createBlogPost(validatedData);\n      res.json(post);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        res.status(400).json({ message: \"Validation error\", errors: error.errors });\n      } else {\n        console.error(\"Error creating blog post:\", error);\n        res.status(500).json({ message: \"Failed to create blog post\" });\n      }\n    }\n  });\n\n  app.put(\"/api/blog/:id\", requireAdmin, async (req, res) => {\n    try {\n      const validatedData = insertBlogPostSchema.partial().parse(req.body);\n      const post = await storage.updateBlogPost(req.params.id, validatedData);\n      res.json(post);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        res.status(400).json({ message: \"Validation error\", errors: error.errors });\n      } else {\n        console.error(\"Error updating blog post:\", error);\n        res.status(500).json({ message: \"Failed to update blog post\" });\n      }\n    }\n  });\n\n  app.delete(\"/api/blog/:id\", requireAdmin, async (req, res) => {\n    try {\n      await storage.deleteBlogPost(req.params.id);\n      res.json({ message: \"Blog post deleted successfully\" });\n    } catch (error) {\n      console.error(\"Error deleting blog post:\", error);\n      res.status(500).json({ message: \"Failed to delete blog post\" });\n    }\n  });\n\n  // Gallery routes\n  app.get(\"/api/gallery\", async (req, res) => {\n    try {\n      const category = req.query.category as string;\n      const items = await storage.getGalleryItems(category);\n      res.json(items);\n    } catch (error) {\n      console.error(\"Error fetching gallery items:\", error);\n      res.status(500).json({ message: \"Failed to fetch gallery items\" });\n    }\n  });\n\n  app.post(\"/api/gallery\", requireAdmin, async (req, res) => {\n    try {\n      const validatedData = insertGalleryItemSchema.parse(req.body);\n      const item = await storage.createGalleryItem(validatedData);\n      res.json(item);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        res.status(400).json({ message: \"Validation error\", errors: error.errors });\n      } else {\n        console.error(\"Error creating gallery item:\", error);\n        res.status(500).json({ message: \"Failed to create gallery item\" });\n      }\n    }\n  });\n\n  app.delete(\"/api/gallery/:id\", requireAdmin, async (req, res) => {\n    try {\n      await storage.deleteGalleryItem(req.params.id);\n      res.json({ message: \"Gallery item deleted successfully\" });\n    } catch (error) {\n      console.error(\"Error deleting gallery item:\", error);\n      res.status(500).json({ message: \"Failed to delete gallery item\" });\n    }\n  });\n\n  // Venue routes\n  app.get(\"/api/venues\", async (req, res) => {\n    try {\n      const filters = {\n        city: req.query.city as string,\n        capacity: req.query.capacity as string,\n        eventType: req.query.eventType as string,\n      };\n      const venues = await storage.getVenues(filters);\n      res.json(venues);\n    } catch (error) {\n      console.error(\"Error fetching venues:\", error);\n      res.status(500).json({ message: \"Failed to fetch venues\" });\n    }\n  });\n\n  app.get(\"/api/venues/:id\", async (req, res) => {\n    try {\n      const venue = await storage.getVenue(req.params.id);\n      if (!venue) {\n        return res.status(404).json({ message: \"Venue not found\" });\n      }\n      res.json(venue);\n    } catch (error) {\n      console.error(\"Error fetching venue:\", error);\n      res.status(500).json({ message: \"Failed to fetch venue\" });\n    }\n  });\n\n  app.post(\"/api/venues\", requireAdmin, async (req, res) => {\n    try {\n      const validatedData = insertVenueSchema.parse(req.body);\n      const venue = await storage.createVenue(validatedData);\n      res.json(venue);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        res.status(400).json({ message: \"Validation error\", errors: error.errors });\n      } else {\n        console.error(\"Error creating venue:\", error);\n        res.status(500).json({ message: \"Failed to create venue\" });\n      }\n    }\n  });\n\n  app.put(\"/api/venues/:id\", requireAdmin, async (req, res) => {\n    try {\n      const validatedData = insertVenueSchema.partial().parse(req.body);\n      const venue = await storage.updateVenue(req.params.id, validatedData);\n      res.json(venue);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        res.status(400).json({ message: \"Validation error\", errors: error.errors });\n      } else {\n        console.error(\"Error updating venue:\", error);\n        res.status(500).json({ message: \"Failed to update venue\" });\n      }\n    }\n  });\n\n  app.delete(\"/api/venues/:id\", requireAdmin, async (req, res) => {\n    try {\n      await storage.deleteVenue(req.params.id);\n      res.json({ message: \"Venue deleted successfully\" });\n    } catch (error) {\n      console.error(\"Error deleting venue:\", error);\n      res.status(500).json({ message: \"Failed to delete venue\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":9435},"server/storage.ts":{"content":"import {\n  users,\n  quoteRequests,\n  contactMessages,\n  blogPosts,\n  galleryItems,\n  venues,\n  type User,\n  type UpsertUser,\n  type QuoteRequest,\n  type InsertQuoteRequest,\n  type ContactMessage,\n  type InsertContactMessage,\n  type BlogPost,\n  type InsertBlogPost,\n  type GalleryItem,\n  type InsertGalleryItem,\n  type Venue,\n  type InsertVenue,\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, desc, like, and, sql } from \"drizzle-orm\";\n\nexport interface IStorage {\n  // User operations (mandatory for Replit Auth)\n  getUser(id: string): Promise<User | undefined>;\n  upsertUser(user: UpsertUser): Promise<User>;\n  \n  // Quote operations\n  createQuoteRequest(quote: InsertQuoteRequest): Promise<QuoteRequest>;\n  getQuoteRequests(): Promise<QuoteRequest[]>;\n  getQuoteRequest(id: string): Promise<QuoteRequest | undefined>;\n  updateQuoteRequestStatus(id: string, status: string, estimatedCost?: string): Promise<QuoteRequest>;\n  \n  // Contact operations\n  createContactMessage(message: InsertContactMessage): Promise<ContactMessage>;\n  getContactMessages(): Promise<ContactMessage[]>;\n  updateContactMessageStatus(id: string, status: string): Promise<ContactMessage>;\n  \n  // Blog operations\n  createBlogPost(post: InsertBlogPost): Promise<BlogPost>;\n  getBlogPosts(published?: boolean): Promise<BlogPost[]>;\n  getBlogPost(slug: string): Promise<BlogPost | undefined>;\n  updateBlogPost(id: string, post: Partial<InsertBlogPost>): Promise<BlogPost>;\n  deleteBlogPost(id: string): Promise<void>;\n  \n  // Gallery operations\n  createGalleryItem(item: InsertGalleryItem): Promise<GalleryItem>;\n  getGalleryItems(category?: string): Promise<GalleryItem[]>;\n  deleteGalleryItem(id: string): Promise<void>;\n  \n  // Venue operations\n  createVenue(venue: InsertVenue): Promise<Venue>;\n  getVenues(filters?: { city?: string, capacity?: string, eventType?: string }): Promise<Venue[]>;\n  getVenue(id: string): Promise<Venue | undefined>;\n  updateVenue(id: string, venue: Partial<InsertVenue>): Promise<Venue>;\n  deleteVenue(id: string): Promise<void>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  // User operations\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user;\n  }\n\n  async upsertUser(userData: UpsertUser): Promise<User> {\n    const [user] = await db\n      .insert(users)\n      .values(userData)\n      .onConflictDoUpdate({\n        target: users.id,\n        set: {\n          ...userData,\n          updatedAt: new Date(),\n        },\n      })\n      .returning();\n    return user;\n  }\n\n  // Quote operations\n  async createQuoteRequest(quote: InsertQuoteRequest): Promise<QuoteRequest> {\n    const [quoteRequest] = await db\n      .insert(quoteRequests)\n      .values(quote)\n      .returning();\n    return quoteRequest;\n  }\n\n  async getQuoteRequests(): Promise<QuoteRequest[]> {\n    return await db\n      .select()\n      .from(quoteRequests)\n      .orderBy(desc(quoteRequests.createdAt));\n  }\n\n  async getQuoteRequest(id: string): Promise<QuoteRequest | undefined> {\n    const [quote] = await db\n      .select()\n      .from(quoteRequests)\n      .where(eq(quoteRequests.id, id));\n    return quote;\n  }\n\n  async updateQuoteRequestStatus(id: string, status: string, estimatedCost?: string): Promise<QuoteRequest> {\n    const [quote] = await db\n      .update(quoteRequests)\n      .set({ \n        status, \n        estimatedCost,\n        updatedAt: new Date() \n      })\n      .where(eq(quoteRequests.id, id))\n      .returning();\n    return quote;\n  }\n\n  // Contact operations\n  async createContactMessage(message: InsertContactMessage): Promise<ContactMessage> {\n    const [contactMessage] = await db\n      .insert(contactMessages)\n      .values(message)\n      .returning();\n    return contactMessage;\n  }\n\n  async getContactMessages(): Promise<ContactMessage[]> {\n    return await db\n      .select()\n      .from(contactMessages)\n      .orderBy(desc(contactMessages.createdAt));\n  }\n\n  async updateContactMessageStatus(id: string, status: string): Promise<ContactMessage> {\n    const [message] = await db\n      .update(contactMessages)\n      .set({ status })\n      .where(eq(contactMessages.id, id))\n      .returning();\n    return message;\n  }\n\n  // Blog operations\n  async createBlogPost(post: InsertBlogPost): Promise<BlogPost> {\n    const [blogPost] = await db\n      .insert(blogPosts)\n      .values(post)\n      .returning();\n    return blogPost;\n  }\n\n  async getBlogPosts(published?: boolean): Promise<BlogPost[]> {\n    const query = db.select().from(blogPosts);\n    \n    if (published !== undefined) {\n      query.where(eq(blogPosts.published, published));\n    }\n    \n    return await query.orderBy(desc(blogPosts.createdAt));\n  }\n\n  async getBlogPost(slug: string): Promise<BlogPost | undefined> {\n    const [post] = await db\n      .select()\n      .from(blogPosts)\n      .where(eq(blogPosts.slug, slug));\n    return post;\n  }\n\n  async updateBlogPost(id: string, post: Partial<InsertBlogPost>): Promise<BlogPost> {\n    const [blogPost] = await db\n      .update(blogPosts)\n      .set({ ...post, updatedAt: new Date() })\n      .where(eq(blogPosts.id, id))\n      .returning();\n    return blogPost;\n  }\n\n  async deleteBlogPost(id: string): Promise<void> {\n    await db.delete(blogPosts).where(eq(blogPosts.id, id));\n  }\n\n  // Gallery operations\n  async createGalleryItem(item: InsertGalleryItem): Promise<GalleryItem> {\n    const [galleryItem] = await db\n      .insert(galleryItems)\n      .values(item)\n      .returning();\n    return galleryItem;\n  }\n\n  async getGalleryItems(category?: string): Promise<GalleryItem[]> {\n    const query = db.select().from(galleryItems);\n    \n    if (category && category !== 'all') {\n      query.where(eq(galleryItems.category, category));\n    }\n    \n    return await query.orderBy(desc(galleryItems.createdAt));\n  }\n\n  async deleteGalleryItem(id: string): Promise<void> {\n    await db.delete(galleryItems).where(eq(galleryItems.id, id));\n  }\n\n  // Venue operations\n  async createVenue(venue: InsertVenue): Promise<Venue> {\n    const [newVenue] = await db\n      .insert(venues)\n      .values(venue)\n      .returning();\n    return newVenue;\n  }\n\n  async getVenues(filters?: { city?: string, capacity?: string, eventType?: string }): Promise<Venue[]> {\n    const conditions = [eq(venues.available, true)];\n    \n    if (filters?.city) {\n      conditions.push(like(venues.city, `%${filters.city}%`));\n    }\n    \n    if (filters?.capacity) {\n      const capacityRanges: { [key: string]: [number, number] } = {\n        '1-50': [1, 50],\n        '51-100': [51, 100],\n        '101-200': [101, 200],\n        '201-500': [201, 500],\n        '500+': [500, 99999],\n      };\n      \n      const range = capacityRanges[filters.capacity];\n      if (range) {\n        conditions.push(sql`${venues.capacity} >= ${range[0]}`);\n        conditions.push(sql`${venues.capacity} <= ${range[1]}`);\n      }\n    }\n    \n    if (filters?.eventType) {\n      conditions.push(like(venues.suitableFor, `%${filters.eventType}%`));\n    }\n    \n    return await db.select()\n      .from(venues)\n      .where(and(...conditions))\n      .orderBy(desc(venues.rating));\n  }\n\n  async getVenue(id: string): Promise<Venue | undefined> {\n    const [venue] = await db\n      .select()\n      .from(venues)\n      .where(eq(venues.id, id));\n    return venue;\n  }\n\n  async updateVenue(id: string, venue: Partial<InsertVenue>): Promise<Venue> {\n    const [updatedVenue] = await db\n      .update(venues)\n      .set(venue)\n      .where(eq(venues.id, id))\n      .returning();\n    return updatedVenue;\n  }\n\n  async deleteVenue(id: string): Promise<void> {\n    await db.delete(venues).where(eq(venues.id, id));\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":7743},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from 'drizzle-orm';\nimport {\n  index,\n  jsonb,\n  pgTable,\n  timestamp,\n  varchar,\n  text,\n  integer,\n  boolean,\n  decimal,\n} from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Session storage table for Replit Auth\nexport const sessions = pgTable(\n  \"sessions\",\n  {\n    sid: varchar(\"sid\").primaryKey(),\n    sess: jsonb(\"sess\").notNull(),\n    expire: timestamp(\"expire\").notNull(),\n  },\n  (table) => [index(\"IDX_session_expire\").on(table.expire)],\n);\n\n// User storage table for Replit Auth\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  email: varchar(\"email\").unique(),\n  firstName: varchar(\"first_name\"),\n  lastName: varchar(\"last_name\"),\n  profileImageUrl: varchar(\"profile_image_url\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Quote requests table\nexport const quoteRequests = pgTable(\"quote_requests\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id),\n  eventType: varchar(\"event_type\").notNull(),\n  guestCount: varchar(\"guest_count\").notNull(),\n  eventDate: timestamp(\"event_date\").notNull(),\n  budget: varchar(\"budget\").notNull(),\n  venue: text(\"venue\"),\n  services: jsonb(\"services\").notNull(),\n  name: varchar(\"name\").notNull(),\n  email: varchar(\"email\").notNull(),\n  phone: varchar(\"phone\").notNull(),\n  contactMethod: varchar(\"contact_method\").default(\"email\"),\n  details: text(\"details\"),\n  status: varchar(\"status\").default(\"pending\"),\n  estimatedCost: decimal(\"estimated_cost\", { precision: 10, scale: 2 }),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Contact messages table\nexport const contactMessages = pgTable(\"contact_messages\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  firstName: varchar(\"first_name\").notNull(),\n  lastName: varchar(\"last_name\").notNull(),\n  email: varchar(\"email\").notNull(),\n  phone: varchar(\"phone\"),\n  subject: varchar(\"subject\").notNull(),\n  message: text(\"message\").notNull(),\n  status: varchar(\"status\").default(\"unread\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Blog posts table\nexport const blogPosts = pgTable(\"blog_posts\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  title: varchar(\"title\").notNull(),\n  slug: varchar(\"slug\").unique().notNull(),\n  excerpt: text(\"excerpt\").notNull(),\n  content: text(\"content\").notNull(),\n  category: varchar(\"category\").notNull(),\n  tags: text(\"tags\").array(),\n  featuredImage: varchar(\"featured_image\"),\n  published: boolean(\"published\").default(false),\n  publishedAt: timestamp(\"published_at\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Gallery items table\nexport const galleryItems = pgTable(\"gallery_items\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  title: varchar(\"title\").notNull(),\n  description: text(\"description\"),\n  imageUrl: varchar(\"image_url\").notNull(),\n  category: varchar(\"category\").notNull(),\n  eventType: varchar(\"event_type\"),\n  featured: boolean(\"featured\").default(false),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Venues table\nexport const venues = pgTable(\"venues\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: varchar(\"name\").notNull(),\n  description: text(\"description\"),\n  address: text(\"address\").notNull(),\n  city: varchar(\"city\").notNull(),\n  state: varchar(\"state\").notNull(),\n  zipCode: varchar(\"zip_code\").notNull(),\n  capacity: integer(\"capacity\").notNull(),\n  pricePerDay: decimal(\"price_per_day\", { precision: 10, scale: 2 }).notNull(),\n  amenities: text(\"amenities\").array(),\n  images: text(\"images\").array(),\n  rating: decimal(\"rating\", { precision: 2, scale: 1 }).default(\"0.0\"),\n  reviewCount: integer(\"review_count\").default(0),\n  available: boolean(\"available\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Schema exports for validation\nexport const insertQuoteRequestSchema = createInsertSchema(quoteRequests).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertContactMessageSchema = createInsertSchema(contactMessages).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertBlogPostSchema = createInsertSchema(blogPosts).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertGalleryItemSchema = createInsertSchema(galleryItems).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertVenueSchema = createInsertSchema(venues).omit({\n  id: true,\n  createdAt: true,\n});\n\n// Type exports\nexport type User = typeof users.$inferSelect;\nexport type UpsertUser = typeof users.$inferInsert;\nexport type QuoteRequest = typeof quoteRequests.$inferSelect;\nexport type InsertQuoteRequest = z.infer<typeof insertQuoteRequestSchema>;\nexport type ContactMessage = typeof contactMessages.$inferSelect;\nexport type InsertContactMessage = z.infer<typeof insertContactMessageSchema>;\nexport type BlogPost = typeof blogPosts.$inferSelect;\nexport type InsertBlogPost = z.infer<typeof insertBlogPostSchema>;\nexport type GalleryItem = typeof galleryItems.$inferSelect;\nexport type InsertGalleryItem = z.infer<typeof insertGalleryItemSchema>;\nexport type Venue = typeof venues.$inferSelect;\nexport type InsertVenue = z.infer<typeof insertVenueSchema>;\n","size_bytes":5512},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport NotFound from \"@/pages/not-found\";\nimport Landing from \"@/pages/landing\";\nimport Services from \"@/pages/services\";\nimport Venues from \"@/pages/venues\";\nimport Gallery from \"@/pages/gallery\";\nimport Blog from \"@/pages/blog\";\nimport BlogPost from \"@/pages/blog-post\";\nimport Contact from \"@/pages/contact\";\nimport Admin from \"@/pages/admin\";\nimport AdminLogin from \"@/pages/admin-login\";\n\nfunction Router() {\n  const { isAuthenticated, isLoading } = useAuth();\n\n  return (\n    <Switch>\n      {/* Public routes - always accessible */}\n      <Route path=\"/\" component={Landing} />\n      <Route path=\"/services\" component={Services} />\n      <Route path=\"/venues\" component={Venues} />\n      <Route path=\"/gallery\" component={Gallery} />\n      <Route path=\"/blog\" component={Blog} />\n      <Route path=\"/blog/:slug\" component={BlogPost} />\n      <Route path=\"/contact\" component={Contact} />\n      \n      {/* Admin routes */}\n      <Route path=\"/admin/login\" component={AdminLogin} />\n      <Route path=\"/admin\" component={isAuthenticated ? Admin : AdminLogin} />\n      \n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <Router />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":1653},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Inter:ital,opsz,wght@0,14..32,100..900;1,14..32,100..900&display=swap');\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(0, 0%, 100%);\n  --foreground: hsl(215, 16%, 47%);\n  --card: hsl(210, 40%, 98%);\n  --card-foreground: hsl(215, 16%, 47%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(215, 16%, 47%);\n  --primary: hsl(271, 81%, 56%);\n  --primary-foreground: hsl(0, 0%, 100%);\n  --secondary: hsl(43, 96%, 56%);\n  --secondary-foreground: hsl(0, 0%, 0%);\n  --muted: hsl(217, 19%, 35%);\n  --muted-foreground: hsl(215, 16%, 47%);\n  --accent: hsl(328, 85%, 70%);\n  --accent-foreground: hsl(0, 0%, 100%);\n  --destructive: hsl(0, 84%, 60%);\n  --destructive-foreground: hsl(0, 0%, 100%);\n  --border: hsl(214, 32%, 91%);\n  --input: hsl(214, 32%, 91%);\n  --ring: hsl(271, 81%, 56%);\n  --chart-1: hsl(271, 81%, 56%);\n  --chart-2: hsl(160, 60%, 45%);\n  --chart-3: hsl(30, 80%, 55%);\n  --chart-4: hsl(280, 65%, 60%);\n  --chart-5: hsl(340, 75%, 55%);\n  --sidebar: hsl(210, 40%, 98%);\n  --sidebar-foreground: hsl(215, 16%, 47%);\n  --sidebar-primary: hsl(271, 81%, 56%);\n  --sidebar-primary-foreground: hsl(0, 0%, 100%);\n  --sidebar-accent: hsl(210, 40%, 96%);\n  --sidebar-accent-foreground: hsl(215, 16%, 47%);\n  --sidebar-border: hsl(214, 32%, 91%);\n  --sidebar-ring: hsl(271, 81%, 56%);\n  --font-sans: 'Inter', sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: 'Fira Code', monospace;\n  --radius: 0.5rem;\n}\n\n.dark {\n  --background: hsl(215, 28%, 17%);\n  --foreground: hsl(210, 40%, 98%);\n  --card: hsl(215, 28%, 17%);\n  --card-foreground: hsl(210, 40%, 98%);\n  --popover: hsl(215, 28%, 17%);\n  --popover-foreground: hsl(210, 40%, 98%);\n  --primary: hsl(271, 81%, 56%);\n  --primary-foreground: hsl(0, 0%, 100%);\n  --secondary: hsl(43, 96%, 56%);\n  --secondary-foreground: hsl(0, 0%, 0%);\n  --muted: hsl(217, 19%, 27%);\n  --muted-foreground: hsl(215, 20%, 65%);\n  --accent: hsl(328, 85%, 70%);\n  --accent-foreground: hsl(0, 0%, 100%);\n  --destructive: hsl(0, 63%, 31%);\n  --destructive-foreground: hsl(210, 40%, 98%);\n  --border: hsl(215, 28%, 27%);\n  --input: hsl(215, 28%, 27%);\n  --ring: hsl(271, 81%, 56%);\n  --chart-1: hsl(271, 81%, 56%);\n  --chart-2: hsl(160, 60%, 45%);\n  --chart-3: hsl(30, 80%, 55%);\n  --chart-4: hsl(280, 65%, 60%);\n  --chart-5: hsl(340, 75%, 55%);\n  --sidebar: hsl(215, 28%, 17%);\n  --sidebar-foreground: hsl(210, 40%, 98%);\n  --sidebar-primary: hsl(271, 81%, 56%);\n  --sidebar-primary-foreground: hsl(0, 0%, 100%);\n  --sidebar-accent: hsl(215, 28%, 27%);\n  --sidebar-accent-foreground: hsl(210, 40%, 98%);\n  --sidebar-border: hsl(215, 28%, 27%);\n  --sidebar-ring: hsl(271, 81%, 56%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n  \n  body {\n    @apply bg-background text-foreground font-sans antialiased;\n    font-family: 'Inter', sans-serif;\n  }\n\n  h1, h2, h3, h4, h5, h6 {\n    @apply font-bold;\n  }\n}\n\n@layer utilities {\n  .line-clamp-2 {\n    display: -webkit-box;\n    -webkit-line-clamp: 2;\n    -webkit-box-orient: vertical;\n    overflow: hidden;\n  }\n  \n  .line-clamp-3 {\n    display: -webkit-box;\n    -webkit-line-clamp: 3;\n    -webkit-box-orient: vertical;\n    overflow: hidden;\n  }\n}\n","size_bytes":3229},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/hooks/useAuth.ts":{"content":"import { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { queryClient } from \"@/lib/queryClient\";\n\nexport function useAuth() {\n  const { data: user, isLoading } = useQuery({\n    queryKey: [\"/api/admin/user\"],\n    retry: false,\n  });\n\n  const loginMutation = useMutation({\n    mutationFn: async (credentials: { username: string; password: string }) => {\n      const response = await fetch(\"/api/admin/login\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify(credentials),\n      });\n      \n      if (!response.ok) {\n        throw new Error(\"Invalid credentials\");\n      }\n      \n      return response.json();\n    },\n    onSuccess: (data) => {\n      queryClient.setQueryData([\"/api/admin/user\"], data.user);\n    },\n  });\n\n  const logoutMutation = useMutation({\n    mutationFn: async () => {\n      const response = await fetch(\"/api/admin/logout\", {\n        method: \"POST\",\n      });\n      \n      if (!response.ok) {\n        throw new Error(\"Logout failed\");\n      }\n      \n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.setQueryData([\"/api/admin/user\"], null);\n    },\n  });\n\n  return {\n    user,\n    isLoading,\n    isAuthenticated: !!user,\n    loginMutation,\n    logoutMutation,\n  };\n}\n","size_bytes":1291},"client/src/lib/authUtils.ts":{"content":"export function isUnauthorizedError(error: Error): boolean {\n  return /^401: .*Unauthorized/.test(error.message);\n}","size_bytes":115},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/admin-login.tsx":{"content":"import { useState } from \"react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Label } from \"@/components/ui/label\";\nimport { AlertCircle, Shield } from \"lucide-react\";\nimport { useLocation } from \"wouter\";\n\nexport default function AdminLogin() {\n  const [username, setUsername] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [error, setError] = useState(\"\");\n  const { loginMutation } = useAuth();\n  const [, setLocation] = useLocation();\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setError(\"\");\n    \n    try {\n      await loginMutation.mutateAsync({ username, password });\n      setLocation(\"/admin\");\n    } catch (err) {\n      setError(\"Invalid username or password\");\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-primary to-accent flex items-center justify-center p-4\">\n      <Card className=\"w-full max-w-md\">\n        <CardHeader className=\"text-center\">\n          <div className=\"mx-auto mb-4 flex h-12 w-12 items-center justify-center rounded-full bg-primary/10\">\n            <Shield className=\"h-6 w-6 text-primary\" />\n          </div>\n          <CardTitle className=\"text-2xl font-bold\">Admin Access</CardTitle>\n          <CardDescription>\n            Sign in to access the admin dashboard\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <form onSubmit={handleSubmit} className=\"space-y-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"username\">Username</Label>\n              <Input\n                id=\"username\"\n                type=\"text\"\n                placeholder=\"Enter username\"\n                value={username}\n                onChange={(e) => setUsername(e.target.value)}\n                required\n                data-testid=\"input-username\"\n              />\n            </div>\n            \n            <div className=\"space-y-2\">\n              <Label htmlFor=\"password\">Password</Label>\n              <Input\n                id=\"password\"\n                type=\"password\"\n                placeholder=\"Enter password\"\n                value={password}\n                onChange={(e) => setPassword(e.target.value)}\n                required\n                data-testid=\"input-password\"\n              />\n            </div>\n\n            {error && (\n              <div className=\"flex items-center gap-2 text-sm text-red-600 bg-red-50 p-3 rounded-lg\" data-testid=\"login-error\">\n                <AlertCircle className=\"h-4 w-4\" />\n                {error}\n              </div>\n            )}\n\n            <Button\n              type=\"submit\"\n              className=\"w-full\"\n              disabled={loginMutation.isPending}\n              data-testid=\"button-login\"\n            >\n              {loginMutation.isPending ? \"Signing in...\" : \"Sign In\"}\n            </Button>\n          </form>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":3112},"client/src/pages/admin.tsx":{"content":"import { useEffect, useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport Navbar from \"@/components/layout/navbar\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Input } from \"@/components/ui/input\";\nimport { \n  Calendar, \n  DollarSign, \n  FileText, \n  Star, \n  Users, \n  TrendingUp,\n  MessageCircle,\n  Image,\n  MapPin,\n  BarChart3,\n  Download,\n  RefreshCw\n} from \"lucide-react\";\n\nexport default function Admin() {\n  const { toast } = useToast();\n  const { isAuthenticated, isLoading } = useAuth();\n  const queryClient = useQueryClient();\n\n  // Redirect to home if not authenticated\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, isLoading, toast]);\n\n  // Fetch dashboard data\n  const { data: quotes, isLoading: quotesLoading, error: quotesError } = useQuery({\n    queryKey: [\"/api/quotes\"],\n    retry: false,\n  });\n\n  const { data: contacts, isLoading: contactsLoading } = useQuery({\n    queryKey: [\"/api/contact\"],\n    retry: false,\n  });\n\n  const { data: blogPosts, isLoading: blogLoading } = useQuery({\n    queryKey: [\"/api/blog\"],\n    queryFn: async () => {\n      const response = await fetch(\"/api/blog?published=false\");\n      if (!response.ok) throw new Error(\"Failed to fetch blog posts\");\n      return response.json();\n    },\n    retry: false,\n  });\n\n  const { data: galleryItems, isLoading: galleryLoading } = useQuery({\n    queryKey: [\"/api/gallery\"],\n    retry: false,\n  });\n\n  const { data: venues, isLoading: venuesLoading } = useQuery({\n    queryKey: [\"/api/venues\"],\n    retry: false,\n  });\n\n  // Handle unauthorized errors\n  useEffect(() => {\n    if (quotesError && isUnauthorizedError(quotesError as Error)) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n    }\n  }, [quotesError, toast]);\n\n  // Update quote status mutation\n  const updateQuoteStatusMutation = useMutation({\n    mutationFn: async ({ id, status, estimatedCost }: { id: string, status: string, estimatedCost?: string }) => {\n      return apiRequest(\"PATCH\", `/api/quotes/${id}/status`, { status, estimatedCost });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/quotes\"] });\n      toast({ title: \"Quote updated successfully\" });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error as Error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to update quote\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Update contact message status mutation\n  const updateContactStatusMutation = useMutation({\n    mutationFn: async ({ id, status }: { id: string, status: string }) => {\n      return apiRequest(\"PATCH\", `/api/contact/${id}/status`, { status });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/contact\"] });\n      toast({ title: \"Message updated successfully\" });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error as Error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to update message\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  if (isLoading || !isAuthenticated) {\n    return null;\n  }\n\n  // Calculate dashboard stats\n  const totalQuotes = quotes?.length || 0;\n  const pendingQuotes = quotes?.filter((q: any) => q.status === \"pending\")?.length || 0;\n  const completedEvents = quotes?.filter((q: any) => q.status === \"completed\")?.length || 0;\n  const totalRevenue = quotes?.reduce((sum: number, q: any) => {\n    return sum + (parseFloat(q.estimatedCost || \"0\"));\n  }, 0) || 0;\n\n  const stats = [\n    {\n      title: \"Total Bookings\",\n      value: totalQuotes.toString(),\n      change: \"+12% from last month\",\n      icon: Calendar,\n      color: \"text-primary\",\n    },\n    {\n      title: \"Revenue\",\n      value: `$${Math.round(totalRevenue).toLocaleString()}`,\n      change: \"+8% from last month\", \n      icon: DollarSign,\n      color: \"text-secondary\",\n    },\n    {\n      title: \"Active Quotes\",\n      value: pendingQuotes.toString(),\n      change: \"Pending response\",\n      icon: FileText,\n      color: \"text-accent\",\n    },\n    {\n      title: \"Client Satisfaction\",\n      value: \"4.9\",\n      change: \"Average rating\",\n      icon: Star,\n      color: \"text-green-600\",\n    },\n  ];\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <Navbar />\n      \n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        {/* Dashboard Header */}\n        <div className=\"flex flex-col lg:flex-row justify-between items-start lg:items-center mb-8\">\n          <div>\n            <h1 className=\"text-3xl font-bold text-slate-800 mb-2\" data-testid=\"admin-title\">\n              Admin Dashboard\n            </h1>\n            <p className=\"text-slate-600\">Manage your events, bookings, and content</p>\n          </div>\n          <div className=\"mt-4 lg:mt-0 flex gap-3\">\n            <Button variant=\"outline\" data-testid=\"export-data\">\n              <Download className=\"mr-2 h-4 w-4\" />\n              Export Data\n            </Button>\n            <Button \n              variant=\"outline\"\n              onClick={() => {\n                queryClient.invalidateQueries();\n                toast({ title: \"Dashboard refreshed\" });\n              }}\n              data-testid=\"refresh-dashboard\"\n            >\n              <RefreshCw className=\"mr-2 h-4 w-4\" />\n              Refresh\n            </Button>\n          </div>\n        </div>\n\n        {/* Stats Cards */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\">\n          {stats.map((stat, index) => {\n            const Icon = stat.icon;\n            return (\n              <Card key={index} data-testid={`stat-card-${index}`}>\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <p className=\"text-sm text-slate-600\">{stat.title}</p>\n                      <p className=\"text-3xl font-bold text-slate-800\">{stat.value}</p>\n                      <p className=\"text-sm text-green-600\">{stat.change}</p>\n                    </div>\n                    <div className={`${stat.color} bg-opacity-10 p-3 rounded-lg`}>\n                      <Icon className={`${stat.color} h-6 w-6`} />\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            );\n          })}\n        </div>\n\n        {/* Main Content Tabs */}\n        <Tabs defaultValue=\"quotes\" className=\"space-y-6\">\n          <TabsList className=\"grid w-full grid-cols-2 lg:grid-cols-5\">\n            <TabsTrigger value=\"quotes\" data-testid=\"tab-quotes\">Quotes</TabsTrigger>\n            <TabsTrigger value=\"contacts\" data-testid=\"tab-contacts\">Messages</TabsTrigger>\n            <TabsTrigger value=\"blog\" data-testid=\"tab-blog\">Blog</TabsTrigger>\n            <TabsTrigger value=\"gallery\" data-testid=\"tab-gallery\">Gallery</TabsTrigger>\n            <TabsTrigger value=\"venues\" data-testid=\"tab-venues\">Venues</TabsTrigger>\n          </TabsList>\n\n          {/* Quotes Tab */}\n          <TabsContent value=\"quotes\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <FileText className=\"mr-2 h-5 w-5\" />\n                  Quote Requests\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                {quotesLoading ? (\n                  <div className=\"text-center py-8\">Loading quotes...</div>\n                ) : quotes && quotes.length > 0 ? (\n                  <div className=\"overflow-x-auto\">\n                    <table className=\"w-full\">\n                      <thead>\n                        <tr className=\"border-b text-left\">\n                          <th className=\"pb-3 text-sm font-medium text-slate-600\">Client</th>\n                          <th className=\"pb-3 text-sm font-medium text-slate-600\">Event</th>\n                          <th className=\"pb-3 text-sm font-medium text-slate-600\">Date</th>\n                          <th className=\"pb-3 text-sm font-medium text-slate-600\">Status</th>\n                          <th className=\"pb-3 text-sm font-medium text-slate-600\">Value</th>\n                          <th className=\"pb-3 text-sm font-medium text-slate-600\">Actions</th>\n                        </tr>\n                      </thead>\n                      <tbody className=\"divide-y\">\n                        {quotes.map((quote: any) => (\n                          <tr key={quote.id} data-testid={`quote-row-${quote.id}`}>\n                            <td className=\"py-4\">\n                              <div>\n                                <div className=\"text-sm font-medium text-slate-800\">{quote.name}</div>\n                                <div className=\"text-sm text-slate-600\">{quote.email}</div>\n                              </div>\n                            </td>\n                            <td className=\"py-4\">\n                              <div className=\"text-sm font-medium text-slate-800\">{quote.eventType}</div>\n                              <div className=\"text-sm text-slate-600\">{quote.guestCount} guests</div>\n                            </td>\n                            <td className=\"py-4 text-sm text-slate-600\">\n                              {new Date(quote.eventDate).toLocaleDateString()}\n                            </td>\n                            <td className=\"py-4\">\n                              <Select \n                                value={quote.status} \n                                onValueChange={(status) => \n                                  updateQuoteStatusMutation.mutate({ id: quote.id, status })\n                                }\n                              >\n                                <SelectTrigger className=\"w-32\">\n                                  <SelectValue />\n                                </SelectTrigger>\n                                <SelectContent>\n                                  <SelectItem value=\"pending\">Pending</SelectItem>\n                                  <SelectItem value=\"reviewing\">Reviewing</SelectItem>\n                                  <SelectItem value=\"quoted\">Quoted</SelectItem>\n                                  <SelectItem value=\"accepted\">Accepted</SelectItem>\n                                  <SelectItem value=\"completed\">Completed</SelectItem>\n                                  <SelectItem value=\"cancelled\">Cancelled</SelectItem>\n                                </SelectContent>\n                              </Select>\n                            </td>\n                            <td className=\"py-4 text-sm font-medium text-slate-800\">\n                              ${quote.estimatedCost ? parseFloat(quote.estimatedCost).toLocaleString() : \"-\"}\n                            </td>\n                            <td className=\"py-4\">\n                              <Button size=\"sm\" variant=\"outline\" data-testid={`view-quote-${quote.id}`}>\n                                View\n                              </Button>\n                            </td>\n                          </tr>\n                        ))}\n                      </tbody>\n                    </table>\n                  </div>\n                ) : (\n                  <div className=\"text-center py-8 text-slate-600\">\n                    No quote requests found.\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* Contact Messages Tab */}\n          <TabsContent value=\"contacts\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <MessageCircle className=\"mr-2 h-5 w-5\" />\n                  Contact Messages\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                {contactsLoading ? (\n                  <div className=\"text-center py-8\">Loading messages...</div>\n                ) : contacts && contacts.length > 0 ? (\n                  <div className=\"space-y-4\">\n                    {contacts.map((message: any) => (\n                      <Card key={message.id} data-testid={`message-${message.id}`}>\n                        <CardContent className=\"p-6\">\n                          <div className=\"flex items-start justify-between\">\n                            <div className=\"flex-1\">\n                              <div className=\"flex items-center gap-3 mb-2\">\n                                <h3 className=\"font-medium text-slate-800\">\n                                  {message.firstName} {message.lastName}\n                                </h3>\n                                <Badge \n                                  variant={message.status === \"unread\" ? \"default\" : \"secondary\"}\n                                >\n                                  {message.status}\n                                </Badge>\n                              </div>\n                              <p className=\"text-sm text-slate-600 mb-2\">{message.email}</p>\n                              <p className=\"text-sm font-medium text-slate-800 mb-2\">\n                                Subject: {message.subject}\n                              </p>\n                              <p className=\"text-slate-600\">{message.message}</p>\n                              <p className=\"text-sm text-slate-500 mt-2\">\n                                {new Date(message.createdAt).toLocaleString()}\n                              </p>\n                            </div>\n                            <div className=\"flex gap-2\">\n                              {message.status === \"unread\" && (\n                                <Button \n                                  size=\"sm\" \n                                  onClick={() => \n                                    updateContactStatusMutation.mutate({ id: message.id, status: \"read\" })\n                                  }\n                                  data-testid={`mark-read-${message.id}`}\n                                >\n                                  Mark Read\n                                </Button>\n                              )}\n                              <Button size=\"sm\" variant=\"outline\" data-testid={`reply-${message.id}`}>\n                                Reply\n                              </Button>\n                            </div>\n                          </div>\n                        </CardContent>\n                      </Card>\n                    ))}\n                  </div>\n                ) : (\n                  <div className=\"text-center py-8 text-slate-600\">\n                    No contact messages found.\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* Blog Tab */}\n          <TabsContent value=\"blog\">\n            <Card>\n              <CardHeader>\n                <div className=\"flex items-center justify-between\">\n                  <CardTitle className=\"flex items-center\">\n                    <FileText className=\"mr-2 h-5 w-5\" />\n                    Blog Posts\n                  </CardTitle>\n                  <Button data-testid=\"create-blog-post\">\n                    Create New Post\n                  </Button>\n                </div>\n              </CardHeader>\n              <CardContent>\n                {blogLoading ? (\n                  <div className=\"text-center py-8\">Loading blog posts...</div>\n                ) : blogPosts && blogPosts.length > 0 ? (\n                  <div className=\"space-y-4\">\n                    {blogPosts.map((post: any) => (\n                      <Card key={post.id} data-testid={`blog-post-${post.id}`}>\n                        <CardContent className=\"p-6\">\n                          <div className=\"flex items-start justify-between\">\n                            <div className=\"flex-1\">\n                              <div className=\"flex items-center gap-3 mb-2\">\n                                <h3 className=\"font-medium text-slate-800\">{post.title}</h3>\n                                <Badge variant={post.published ? \"default\" : \"secondary\"}>\n                                  {post.published ? \"Published\" : \"Draft\"}\n                                </Badge>\n                                <Badge variant=\"outline\">{post.category}</Badge>\n                              </div>\n                              <p className=\"text-slate-600 line-clamp-2\">{post.excerpt}</p>\n                              <p className=\"text-sm text-slate-500 mt-2\">\n                                Created: {new Date(post.createdAt).toLocaleDateString()}\n                              </p>\n                            </div>\n                            <div className=\"flex gap-2\">\n                              <Button size=\"sm\" variant=\"outline\" data-testid={`edit-post-${post.id}`}>\n                                Edit\n                              </Button>\n                              <Button size=\"sm\" variant=\"outline\" data-testid={`delete-post-${post.id}`}>\n                                Delete\n                              </Button>\n                            </div>\n                          </div>\n                        </CardContent>\n                      </Card>\n                    ))}\n                  </div>\n                ) : (\n                  <div className=\"text-center py-8 text-slate-600\">\n                    No blog posts found.\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* Gallery Tab */}\n          <TabsContent value=\"gallery\">\n            <Card>\n              <CardHeader>\n                <div className=\"flex items-center justify-between\">\n                  <CardTitle className=\"flex items-center\">\n                    <Image className=\"mr-2 h-5 w-5\" />\n                    Gallery Items\n                  </CardTitle>\n                  <Button data-testid=\"upload-gallery-item\">\n                    Upload New\n                  </Button>\n                </div>\n              </CardHeader>\n              <CardContent>\n                {galleryLoading ? (\n                  <div className=\"text-center py-8\">Loading gallery...</div>\n                ) : galleryItems && galleryItems.length > 0 ? (\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n                    {galleryItems.map((item: any) => (\n                      <Card key={item.id} data-testid={`gallery-item-${item.id}`}>\n                        <div className=\"aspect-video\">\n                          <img \n                            src={item.imageUrl} \n                            alt={item.title}\n                            className=\"w-full h-full object-cover rounded-t-lg\"\n                          />\n                        </div>\n                        <CardContent className=\"p-4\">\n                          <h3 className=\"font-medium text-slate-800 mb-1\">{item.title}</h3>\n                          <Badge variant=\"outline\" className=\"mb-2\">{item.category}</Badge>\n                          <div className=\"flex gap-2\">\n                            <Button size=\"sm\" variant=\"outline\">Edit</Button>\n                            <Button size=\"sm\" variant=\"outline\">Delete</Button>\n                          </div>\n                        </CardContent>\n                      </Card>\n                    ))}\n                  </div>\n                ) : (\n                  <div className=\"text-center py-8 text-slate-600\">\n                    No gallery items found.\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* Venues Tab */}\n          <TabsContent value=\"venues\">\n            <Card>\n              <CardHeader>\n                <div className=\"flex items-center justify-between\">\n                  <CardTitle className=\"flex items-center\">\n                    <MapPin className=\"mr-2 h-5 w-5\" />\n                    Venues\n                  </CardTitle>\n                  <Button data-testid=\"add-venue\">\n                    Add Venue\n                  </Button>\n                </div>\n              </CardHeader>\n              <CardContent>\n                {venuesLoading ? (\n                  <div className=\"text-center py-8\">Loading venues...</div>\n                ) : venues && venues.length > 0 ? (\n                  <div className=\"space-y-4\">\n                    {venues.map((venue: any) => (\n                      <Card key={venue.id} data-testid={`venue-${venue.id}`}>\n                        <CardContent className=\"p-6\">\n                          <div className=\"flex items-start justify-between\">\n                            <div className=\"flex-1\">\n                              <h3 className=\"font-medium text-slate-800 mb-1\">{venue.name}</h3>\n                              <p className=\"text-sm text-slate-600 mb-2\">\n                                {venue.city}, {venue.state}\n                              </p>\n                              <div className=\"flex items-center gap-4 text-sm text-slate-600\">\n                                <span>Capacity: {venue.capacity}</span>\n                                <span>Price: ${venue.pricePerDay}/day</span>\n                                <span>Rating: {venue.rating} ({venue.reviewCount} reviews)</span>\n                              </div>\n                            </div>\n                            <div className=\"flex gap-2\">\n                              <Button size=\"sm\" variant=\"outline\" data-testid={`edit-venue-${venue.id}`}>\n                                Edit\n                              </Button>\n                              <Button size=\"sm\" variant=\"outline\" data-testid={`delete-venue-${venue.id}`}>\n                                Delete\n                              </Button>\n                            </div>\n                          </div>\n                        </CardContent>\n                      </Card>\n                    ))}\n                  </div>\n                ) : (\n                  <div className=\"text-center py-8 text-slate-600\">\n                    No venues found.\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </TabsContent>\n        </Tabs>\n      </div>\n    </div>\n  );\n}\n","size_bytes":23835},"client/src/pages/blog-post.tsx":{"content":"import { useParams } from \"wouter\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport Navbar from \"@/components/layout/navbar\";\nimport Footer from \"@/components/layout/footer\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Calendar, User, ArrowLeft, Share2 } from \"lucide-react\";\nimport { Link } from \"wouter\";\n\nexport default function BlogPost() {\n  const { slug } = useParams();\n\n  const { data: post, isLoading, error } = useQuery({\n    queryKey: [\"/api/blog\", slug],\n    queryFn: async () => {\n      const response = await fetch(`/api/blog/${slug}`);\n      if (!response.ok) {\n        if (response.status === 404) {\n          throw new Error(\"Blog post not found\");\n        }\n        throw new Error(\"Failed to fetch blog post\");\n      }\n      return response.json();\n    },\n  });\n\n  const { data: relatedPosts } = useQuery({\n    queryKey: [\"/api/blog/related\", post?.category],\n    queryFn: async () => {\n      if (!post) return [];\n      const response = await fetch(`/api/blog`);\n      if (!response.ok) return [];\n      const allPosts = await response.json();\n      return allPosts\n        .filter((p: any) => p.category === post.category && p.id !== post.id)\n        .slice(0, 3);\n    },\n    enabled: !!post,\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-gray-50\">\n        <Navbar />\n        <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-12\">\n          <div className=\"animate-pulse\">\n            <div className=\"h-8 bg-gray-200 rounded mb-4 w-1/4\" />\n            <div className=\"h-12 bg-gray-200 rounded mb-6\" />\n            <div className=\"h-64 bg-gray-200 rounded mb-8\" />\n            <div className=\"space-y-4\">\n              <div className=\"h-4 bg-gray-200 rounded\" />\n              <div className=\"h-4 bg-gray-200 rounded\" />\n              <div className=\"h-4 bg-gray-200 rounded w-3/4\" />\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (error || !post) {\n    return (\n      <div className=\"min-h-screen bg-gray-50\">\n        <Navbar />\n        <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-12 text-center\">\n          <div className=\"text-red-500 mb-4\" data-testid=\"blog-post-error\">\n            {error?.message || \"Blog post not found\"}\n          </div>\n          <Button asChild>\n            <Link href=\"/blog\">\n              <ArrowLeft className=\"mr-2 h-4 w-4\" />\n              Back to Blog\n            </Link>\n          </Button>\n        </div>\n      </div>\n    );\n  }\n\n  const categoryColors: { [key: string]: string } = {\n    'Corporate': 'bg-amber-500',\n    'Design': 'bg-pink-500',\n    'Planning': 'bg-purple-600',\n    'Technology': 'bg-green-600',\n    'Sustainability': 'bg-green-500',\n    'Catering': 'bg-orange-500',\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <Navbar />\n      \n      {/* Article Header */}\n      <article className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-12\">\n        <div className=\"mb-8\">\n          <Button variant=\"ghost\" asChild className=\"mb-4\" data-testid=\"back-to-blog\">\n            <Link href=\"/blog\">\n              <ArrowLeft className=\"mr-2 h-4 w-4\" />\n              Back to Blog\n            </Link>\n          </Button>\n          \n          <div className=\"flex items-center text-sm text-slate-600 mb-4\">\n            <Badge \n              className={`mr-4 text-white ${categoryColors[post.category] || 'bg-slate-500'}`}\n              data-testid=\"blog-post-category\"\n            >\n              {post.category}\n            </Badge>\n            <Calendar className=\"h-4 w-4 mr-1\" />\n            <span data-testid=\"blog-post-date\">\n              {new Date(post.publishedAt || post.createdAt).toLocaleDateString('en-US', {\n                month: 'long',\n                day: 'numeric',\n                year: 'numeric'\n              })}\n            </span>\n          </div>\n          \n          <h1 className=\"text-4xl md:text-5xl font-bold text-slate-800 mb-6 leading-tight\" data-testid=\"blog-post-title\">\n            {post.title}\n          </h1>\n          \n          <p className=\"text-xl text-slate-600 mb-8\" data-testid=\"blog-post-excerpt\">\n            {post.excerpt}\n          </p>\n          \n          <div className=\"flex items-center justify-between border-b border-gray-200 pb-8 mb-8\">\n            <div className=\"flex items-center\">\n              <div className=\"w-12 h-12 bg-primary text-white rounded-full flex items-center justify-center text-lg font-medium mr-4\">\n                <User className=\"h-6 w-6\" />\n              </div>\n              <div>\n                <p className=\"font-medium text-slate-800\">ROCKTOP Team</p>\n                <p className=\"text-sm text-slate-600\">Event Planning Experts</p>\n              </div>\n            </div>\n            \n            <Button variant=\"outline\" size=\"sm\" data-testid=\"share-button\">\n              <Share2 className=\"h-4 w-4 mr-2\" />\n              Share\n            </Button>\n          </div>\n        </div>\n\n        {/* Featured Image */}\n        {post.featuredImage && (\n          <div className=\"mb-8\">\n            <img \n              src={post.featuredImage}\n              alt={post.title}\n              className=\"w-full h-64 md:h-96 object-cover rounded-2xl shadow-lg\"\n              data-testid=\"blog-post-featured-image\"\n            />\n          </div>\n        )}\n\n        {/* Article Content */}\n        <div \n          className=\"prose prose-lg max-w-none mb-12\"\n          data-testid=\"blog-post-content\"\n          dangerouslySetInnerHTML={{ __html: post.content }}\n        />\n\n        {/* Tags */}\n        {post.tags && post.tags.length > 0 && (\n          <div className=\"border-t border-gray-200 pt-8 mb-8\">\n            <h3 className=\"text-sm font-medium text-slate-800 mb-4\">Tags</h3>\n            <div className=\"flex flex-wrap gap-2\">\n              {post.tags.map((tag: string, index: number) => (\n                <Badge key={index} variant=\"outline\" data-testid={`tag-${index}`}>\n                  {tag}\n                </Badge>\n              ))}\n            </div>\n          </div>\n        )}\n\n        {/* Related Posts */}\n        {relatedPosts && relatedPosts.length > 0 && (\n          <div className=\"border-t border-gray-200 pt-12\">\n            <h2 className=\"text-2xl font-bold text-slate-800 mb-8\">Related Articles</h2>\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-8\">\n              {relatedPosts.map((relatedPost: any) => (\n                <Card key={relatedPost.id} className=\"overflow-hidden hover:shadow-lg transition-shadow\">\n                  <div className=\"h-32\">\n                    <img \n                      src={relatedPost.featuredImage || \"https://images.unsplash.com/photo-1511795409834-ef04bbd61622?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=200\"}\n                      alt={relatedPost.title}\n                      className=\"w-full h-full object-cover\"\n                    />\n                  </div>\n                  <CardContent className=\"p-4\">\n                    <Badge \n                      className={`mb-2 text-white ${categoryColors[relatedPost.category] || 'bg-slate-500'}`}\n                      size=\"sm\"\n                    >\n                      {relatedPost.category}\n                    </Badge>\n                    <h3 className=\"font-bold text-slate-800 mb-2 line-clamp-2\">\n                      <Link href={`/blog/${relatedPost.slug}`} className=\"hover:text-primary\">\n                        {relatedPost.title}\n                      </Link>\n                    </h3>\n                    <p className=\"text-sm text-slate-600 line-clamp-2\">\n                      {relatedPost.excerpt}\n                    </p>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          </div>\n        )}\n      </article>\n\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":7921},"client/src/pages/blog.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Link } from \"wouter\";\nimport Navbar from \"@/components/layout/navbar\";\nimport Footer from \"@/components/layout/footer\";\nimport BlogCard from \"@/components/ui/blog-card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Search, Calendar, User, ArrowRight } from \"lucide-react\";\nimport { Input } from \"@/components/ui/input\";\n\nexport default function Blog() {\n  const [searchTerm, setSearchTerm] = useState(\"\");\n\n  const { data: blogPosts, isLoading, error } = useQuery({\n    queryKey: [\"/api/blog\"],\n  });\n\n  const { data: featuredPost } = useQuery({\n    queryKey: [\"/api/blog/featured\"],\n    queryFn: async () => {\n      // Get the first published post as featured\n      if (blogPosts && blogPosts.length > 0) {\n        return blogPosts[0];\n      }\n      return null;\n    },\n    enabled: !!blogPosts,\n  });\n\n  const filteredPosts = blogPosts?.filter((post: any) =>\n    post.title.toLowerCase().includes(searchTerm.toLowerCase()) ||\n    post.excerpt.toLowerCase().includes(searchTerm.toLowerCase()) ||\n    post.category.toLowerCase().includes(searchTerm.toLowerCase())\n  ) || [];\n\n  const categories = Array.from(new Set(blogPosts?.map((post: any) => post.category) || []));\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <Navbar />\n      \n      {/* Hero Section */}\n      <section className=\"relative bg-gradient-to-br from-primary to-accent text-white py-20 overflow-hidden\">\n        <div className=\"absolute inset-0 bg-[url('https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?ixlib=rb-4.0.3&auto=format&fit=crop&w=2070&q=80')] bg-cover bg-center opacity-20\"></div>\n        <div className=\"absolute inset-0 bg-gradient-to-br from-primary/80 to-accent/80\"></div>\n        <div className=\"relative max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 text-center\">\n          <h1 className=\"text-4xl md:text-6xl font-bold mb-6\" data-testid=\"blog-hero-title\">\n            Event Planning Insights\n          </h1>\n          <p className=\"text-xl md:text-2xl text-purple-100 mb-8 max-w-3xl mx-auto\">\n            Get insights, tips, and inspiration for planning the perfect event. Stay updated with the latest trends in event management.\n          </p>\n          \n          {/* Search Bar */}\n          <div className=\"max-w-md mx-auto relative\">\n            <Search className=\"absolute left-3 top-3 h-5 w-5 text-gray-400\" />\n            <Input\n              placeholder=\"Search articles...\"\n              value={searchTerm}\n              onChange={(e) => setSearchTerm(e.target.value)}\n              className=\"pl-10 bg-white text-slate-800\"\n              data-testid=\"blog-search\"\n            />\n          </div>\n        </div>\n      </section>\n\n      {/* Featured Article */}\n      {featuredPost && (\n        <section className=\"py-16 bg-white\">\n          <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n            <div className=\"text-center mb-12\">\n              <h2 className=\"text-3xl font-bold text-slate-800 mb-4\">Featured Article</h2>\n            </div>\n            \n            <Card className=\"overflow-hidden shadow-2xl\">\n              <div className=\"grid grid-cols-1 lg:grid-cols-2\">\n                <div className=\"h-64 lg:h-auto\">\n                  <img \n                    src={featuredPost.featuredImage || \"https://images.unsplash.com/photo-1511795409834-ef04bbd61622?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=600\"}\n                    alt={featuredPost.title}\n                    className=\"w-full h-full object-cover\"\n                    data-testid=\"featured-post-image\"\n                  />\n                </div>\n                <CardContent className=\"p-8 lg:p-12\">\n                  <div className=\"flex items-center text-sm text-slate-600 mb-4\">\n                    <Badge className=\"mr-3\">Featured</Badge>\n                    <Calendar className=\"h-4 w-4 mr-1\" />\n                    <span data-testid=\"featured-post-date\">\n                      {new Date(featuredPost.publishedAt || featuredPost.createdAt).toLocaleDateString('en-US', {\n                        month: 'long',\n                        day: 'numeric',\n                        year: 'numeric'\n                      })}\n                    </span>\n                  </div>\n                  <h3 className=\"text-3xl font-bold text-slate-800 mb-4\" data-testid=\"featured-post-title\">\n                    {featuredPost.title}\n                  </h3>\n                  <p className=\"text-slate-600 mb-6 text-lg\" data-testid=\"featured-post-excerpt\">\n                    {featuredPost.excerpt}\n                  </p>\n                  <Button asChild className=\"bg-primary hover:bg-primary/90\" data-testid=\"featured-post-read-button\">\n                    <Link href={`/blog/${featuredPost.slug}`}>\n                      Read Full Article\n                      <ArrowRight className=\"ml-2 h-4 w-4\" />\n                    </Link>\n                  </Button>\n                </CardContent>\n              </div>\n            </Card>\n          </div>\n        </section>\n      )}\n\n      {/* Categories */}\n      {categories.length > 0 && (\n        <section className=\"py-8 bg-gray-100 border-b\">\n          <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n            <div className=\"flex flex-wrap justify-center gap-3\">\n              <Badge variant=\"outline\" className=\"text-sm\">All Categories</Badge>\n              {categories.map((category: string) => (\n                <Badge key={category} variant=\"outline\" className=\"text-sm\">\n                  {category}\n                </Badge>\n              ))}\n            </div>\n          </div>\n        </section>\n      )}\n\n      {/* Blog Posts Grid */}\n      <section className=\"py-16\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex justify-between items-center mb-12\">\n            <h2 className=\"text-3xl font-bold text-slate-800\">Latest Articles</h2>\n            {filteredPosts.length > 0 && (\n              <span className=\"text-slate-600\" data-testid=\"blog-posts-count\">\n                {filteredPosts.length} articles\n              </span>\n            )}\n          </div>\n\n          {isLoading ? (\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8\">\n              {Array.from({ length: 6 }, (_, i) => (\n                <Card key={i} className=\"overflow-hidden\">\n                  <div className=\"w-full h-48 bg-gray-200 animate-pulse\" />\n                  <CardContent className=\"p-6\">\n                    <div className=\"space-y-3\">\n                      <div className=\"h-4 bg-gray-200 animate-pulse rounded w-1/3\" />\n                      <div className=\"h-6 bg-gray-200 animate-pulse rounded\" />\n                      <div className=\"h-4 bg-gray-200 animate-pulse rounded\" />\n                      <div className=\"h-4 bg-gray-200 animate-pulse rounded w-2/3\" />\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          ) : error ? (\n            <div className=\"text-center py-12\" data-testid=\"blog-error\">\n              <div className=\"text-red-500 mb-4\">Failed to load blog posts</div>\n              <Button onClick={() => window.location.reload()}>\n                Try Again\n              </Button>\n            </div>\n          ) : filteredPosts.length > 0 ? (\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8\">\n              {filteredPosts.map((post: any) => (\n                <BlogCard key={post.id} post={post} />\n              ))}\n            </div>\n          ) : (\n            <div className=\"text-center py-12\" data-testid=\"blog-empty\">\n              <div className=\"text-slate-600 mb-4\">\n                {searchTerm ? `No articles found for \"${searchTerm}\"` : \"No blog posts available.\"}\n              </div>\n              {searchTerm && (\n                <Button onClick={() => setSearchTerm(\"\")}>\n                  Clear Search\n                </Button>\n              )}\n            </div>\n          )}\n        </div>\n      </section>\n\n      {/* Newsletter Signup */}\n      <section className=\"py-20 bg-gradient-to-r from-primary to-accent text-white\">\n        <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 text-center\">\n          <h2 className=\"text-4xl md:text-5xl font-bold mb-6\">\n            Stay Updated\n          </h2>\n          <p className=\"text-xl text-purple-100 mb-8 max-w-2xl mx-auto\">\n            Get the latest event planning tips, trends, and insights delivered to your inbox.\n          </p>\n          <div className=\"flex flex-col sm:flex-row gap-4 justify-center max-w-md mx-auto\">\n            <Input\n              placeholder=\"Enter your email\"\n              className=\"bg-white text-slate-800\"\n              data-testid=\"newsletter-email\"\n            />\n            <Button \n              variant=\"outline\" \n              className=\"border-white text-white hover:bg-white hover:text-primary\"\n              data-testid=\"newsletter-subscribe\"\n            >\n              Subscribe\n            </Button>\n          </div>\n        </div>\n      </section>\n\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":9303},"client/src/pages/contact.tsx":{"content":"import Navbar from \"@/components/layout/navbar\";\nimport Footer from \"@/components/layout/footer\";\nimport ContactForm from \"@/components/forms/contact-form\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { MapPin, Phone, Mail, Clock, MessageCircle } from \"lucide-react\";\n\nconst contactInfo = [\n  {\n    icon: MapPin,\n    title: \"Our Office\",\n    details: [\"123 Event Plaza\", \"Suite 456\", \"Downtown City, ST 12345\"],\n    color: \"text-primary\",\n    bgColor: \"bg-primary/10\",\n  },\n  {\n    icon: Phone,\n    title: \"Phone\",\n    details: [\"(555) 123-4567\", \"Mon-Fri: 9AM-6PM\"],\n    color: \"text-secondary\",\n    bgColor: \"bg-secondary/10\",\n  },\n  {\n    icon: Mail,\n    title: \"Email\",\n    details: [\"info@rocktoppremium.com\", \"quotes@rocktoppremium.com\"],\n    color: \"text-accent\",\n    bgColor: \"bg-accent/10\",\n  },\n];\n\nconst businessHours = [\n  { day: \"Monday - Friday\", hours: \"9:00 AM - 6:00 PM\" },\n  { day: \"Saturday\", hours: \"10:00 AM - 4:00 PM\" },\n  { day: \"Sunday\", hours: \"By Appointment\" },\n];\n\nconst socialLinks = [\n  { name: \"Facebook\", icon: \"fab fa-facebook-f\", href: \"#\", color: \"text-blue-600\" },\n  { name: \"Instagram\", icon: \"fab fa-instagram\", href: \"#\", color: \"text-pink-500\" },\n  { name: \"Twitter\", icon: \"fab fa-twitter\", href: \"#\", color: \"text-blue-400\" },\n  { name: \"LinkedIn\", icon: \"fab fa-linkedin-in\", href: \"#\", color: \"text-blue-700\" },\n  { name: \"YouTube\", icon: \"fab fa-youtube\", href: \"#\", color: \"text-red-600\" },\n];\n\nexport default function Contact() {\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <Navbar />\n      \n      {/* Hero Section */}\n      <section className=\"relative bg-gradient-to-br from-primary to-accent text-white py-20 overflow-hidden\">\n        <div className=\"absolute inset-0 bg-[url('https://images.unsplash.com/photo-1556761175-5973dc0f32e7?ixlib=rb-4.0.3&auto=format&fit=crop&w=2070&q=80')] bg-cover bg-center opacity-20\"></div>\n        <div className=\"absolute inset-0 bg-gradient-to-br from-primary/80 to-accent/80\"></div>\n        <div className=\"relative max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 text-center\">\n          <h1 className=\"text-4xl md:text-6xl font-bold mb-6\" data-testid=\"contact-hero-title\">\n            Get In Touch\n          </h1>\n          <p className=\"text-xl md:text-2xl text-purple-100 mb-8 max-w-3xl mx-auto\">\n            Ready to start planning your perfect event? Contact us today for a free consultation and let's bring your vision to life.\n          </p>\n        </div>\n      </section>\n\n      {/* Contact Form and Info */}\n      <section className=\"py-20\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-12\">\n            {/* Contact Form */}\n            <div className=\"lg:col-span-2\">\n              <ContactForm />\n            </div>\n\n            {/* Contact Information */}\n            <div className=\"space-y-8\">\n              <div>\n                <h2 className=\"text-2xl font-bold text-slate-800 mb-6\" data-testid=\"contact-info-title\">\n                  Contact Information\n                </h2>\n                \n                <div className=\"space-y-6\">\n                  {contactInfo.map((info, index) => {\n                    const Icon = info.icon;\n                    return (\n                      <div key={index} className=\"flex items-start\" data-testid={`contact-info-${index}`}>\n                        <div className={`${info.bgColor} p-3 rounded-lg mr-4`}>\n                          <Icon className={`${info.color} text-xl`} />\n                        </div>\n                        <div>\n                          <h3 className=\"font-semibold text-slate-800 mb-1\">{info.title}</h3>\n                          {info.details.map((detail, detailIndex) => (\n                            <p key={detailIndex} className=\"text-slate-600\">\n                              {detail}\n                            </p>\n                          ))}\n                        </div>\n                      </div>\n                    );\n                  })}\n                </div>\n              </div>\n\n              {/* Social Media */}\n              <div>\n                <h3 className=\"text-xl font-bold text-slate-800 mb-4\">Follow Us</h3>\n                <div className=\"flex space-x-4\">\n                  {socialLinks.map((social) => (\n                    <a\n                      key={social.name}\n                      href={social.href}\n                      className={`${social.color} hover:opacity-75 transition-opacity p-3 bg-white rounded-lg shadow-sm hover:shadow-md`}\n                      data-testid={`social-${social.name.toLowerCase()}`}\n                    >\n                      <i className={`${social.icon} text-xl`}></i>\n                    </a>\n                  ))}\n                </div>\n              </div>\n\n              {/* Business Hours */}\n              <Card>\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-center mb-4\">\n                    <Clock className=\"text-primary mr-2\" />\n                    <h3 className=\"text-xl font-bold text-slate-800\">Business Hours</h3>\n                  </div>\n                  <div className=\"space-y-2\">\n                    {businessHours.map((schedule, index) => (\n                      <div key={index} className=\"flex justify-between\" data-testid={`business-hours-${index}`}>\n                        <span className=\"text-slate-600\">{schedule.day}</span>\n                        <span className=\"text-slate-800 font-medium\">{schedule.hours}</span>\n                      </div>\n                    ))}\n                  </div>\n                </CardContent>\n              </Card>\n\n              {/* Quick Contact Buttons */}\n              <div className=\"space-y-3\">\n                <Button \n                  className=\"w-full bg-green-500 hover:bg-green-600 text-white\"\n                  data-testid=\"quick-contact-whatsapp\"\n                >\n                  <MessageCircle className=\"mr-2 h-4 w-4\" />\n                  WhatsApp Us\n                </Button>\n                <Button \n                  variant=\"outline\" \n                  className=\"w-full\"\n                  data-testid=\"quick-contact-call\"\n                >\n                  <Phone className=\"mr-2 h-4 w-4\" />\n                  Call Now: (555) 123-4567\n                </Button>\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Map Section */}\n      <section className=\"py-20 bg-white\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center mb-12\">\n            <h2 className=\"text-3xl font-bold text-slate-800 mb-4\">Find Our Office</h2>\n            <p className=\"text-slate-600\">Visit us at our convenient downtown location</p>\n          </div>\n          \n          <div className=\"bg-gray-200 rounded-2xl h-96 flex items-center justify-center\">\n            <div className=\"text-center text-slate-600\">\n              <MapPin className=\"h-12 w-12 mx-auto mb-4 text-primary\" />\n              <p className=\"text-lg font-medium\">Interactive Map</p>\n              <p className=\"text-sm\">Google Maps integration showing our office location</p>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* FAQ Section */}\n      <section className=\"py-20 bg-gray-100\">\n        <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center mb-12\">\n            <h2 className=\"text-3xl font-bold text-slate-800 mb-4\">Frequently Asked Questions</h2>\n            <p className=\"text-slate-600\">Quick answers to common questions</p>\n          </div>\n\n          <div className=\"space-y-6\">\n            <Card>\n              <CardContent className=\"p-6\">\n                <h3 className=\"text-lg font-semibold text-slate-800 mb-2\">\n                  How far in advance should I book your services?\n                </h3>\n                <p className=\"text-slate-600\">\n                  We recommend booking 3-6 months in advance for weddings and large events, \n                  and 4-8 weeks for corporate events. However, we can accommodate shorter timelines based on availability.\n                </p>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardContent className=\"p-6\">\n                <h3 className=\"text-lg font-semibold text-slate-800 mb-2\">\n                  Do you provide services outside your local area?\n                </h3>\n                <p className=\"text-slate-600\">\n                  Yes, we travel for destination events. Additional travel costs may apply based on location and distance.\n                </p>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardContent className=\"p-6\">\n                <h3 className=\"text-lg font-semibold text-slate-800 mb-2\">\n                  What's included in your event planning packages?\n                </h3>\n                <p className=\"text-slate-600\">\n                  Our packages vary based on your needs but typically include venue coordination, \n                  vendor management, timeline development, and day-of coordination. We'll provide a detailed breakdown with your quote.\n                </p>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardContent className=\"p-6\">\n                <h3 className=\"text-lg font-semibold text-slate-800 mb-2\">\n                  Do you offer payment plans?\n                </h3>\n                <p className=\"text-slate-600\">\n                  Yes, we offer flexible payment plans to make our services accessible. \n                  We typically require a deposit to secure your date, with the balance due in installments.\n                </p>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </section>\n\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":9971},"client/src/pages/gallery.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport Navbar from \"@/components/layout/navbar\";\nimport Footer from \"@/components/layout/footer\";\nimport GalleryItem from \"@/components/ui/gallery-item\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Card, CardContent } from \"@/components/ui/card\";\n\nconst galleryFilters = [\n  { id: \"all\", label: \"All Events\" },\n  { id: \"weddings\", label: \"Weddings\" },\n  { id: \"corporate\", label: \"Corporate\" },\n  { id: \"social\", label: \"Social Events\" },\n  { id: \"academic\", label: \"Academic\" },\n];\n\nexport default function Gallery() {\n  const [activeFilter, setActiveFilter] = useState(\"all\");\n\n  const { data: galleryItems, isLoading, error } = useQuery({\n    queryKey: [\"/api/gallery\", activeFilter],\n    queryFn: async () => {\n      const response = await fetch(`/api/gallery${activeFilter !== 'all' ? `?category=${activeFilter}` : ''}`);\n      if (!response.ok) throw new Error(\"Failed to fetch gallery items\");\n      return response.json();\n    },\n  });\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <Navbar />\n      \n      {/* Hero Section */}\n      <section className=\"relative bg-gradient-to-br from-primary to-accent text-white py-20 overflow-hidden\">\n        <div className=\"absolute inset-0 bg-[url('https://images.unsplash.com/photo-1464366400600-7168b8af9bc3?ixlib=rb-4.0.3&auto=format&fit=crop&w=2069&q=80')] bg-cover bg-center opacity-20\"></div>\n        <div className=\"absolute inset-0 bg-gradient-to-br from-primary/80 to-accent/80\"></div>\n        <div className=\"relative max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 text-center\">\n          <h1 className=\"text-4xl md:text-6xl font-bold mb-6\" data-testid=\"gallery-hero-title\">\n            Our Portfolio\n          </h1>\n          <p className=\"text-xl md:text-2xl text-purple-100 mb-8 max-w-3xl mx-auto\">\n            Explore our recent events and see how we bring visions to life with creativity and attention to detail.\n          </p>\n        </div>\n      </section>\n\n      {/* Category Filters */}\n      <section className=\"py-8 bg-white border-b\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex flex-wrap justify-center gap-4\">\n            {galleryFilters.map((filter) => (\n              <Button\n                key={filter.id}\n                variant={activeFilter === filter.id ? \"default\" : \"outline\"}\n                onClick={() => setActiveFilter(filter.id)}\n                data-testid={`filter-${filter.id}`}\n              >\n                {filter.label}\n              </Button>\n            ))}\n          </div>\n        </div>\n      </section>\n\n      {/* Gallery Grid */}\n      <section className=\"py-12\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          {isLoading ? (\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6\">\n              {Array.from({ length: 12 }, (_, i) => (\n                <div key={i} className=\"rounded-xl overflow-hidden\">\n                  <div className=\"w-full h-64 bg-gray-200 animate-pulse\" />\n                </div>\n              ))}\n            </div>\n          ) : error ? (\n            <div className=\"text-center py-12\" data-testid=\"gallery-error\">\n              <div className=\"text-red-500 mb-4\">Failed to load gallery</div>\n              <Button onClick={() => window.location.reload()}>\n                Try Again\n              </Button>\n            </div>\n          ) : galleryItems && galleryItems.length > 0 ? (\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6\">\n              {galleryItems.map((item: any) => (\n                <GalleryItem key={item.id} item={item} />\n              ))}\n            </div>\n          ) : (\n            <div className=\"text-center py-12\" data-testid=\"gallery-empty\">\n              <div className=\"text-slate-600 mb-4\">\n                No gallery items found for this category.\n              </div>\n              <Button onClick={() => setActiveFilter(\"all\")}>\n                View All Events\n              </Button>\n            </div>\n          )}\n        </div>\n      </section>\n\n      {/* Featured Work Section */}\n      <section className=\"py-20 bg-white\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center mb-16\">\n            <h2 className=\"text-4xl md:text-5xl font-bold text-slate-800 mb-6\">\n              Featured Events\n            </h2>\n            <p className=\"text-xl text-slate-600 max-w-3xl mx-auto\">\n              Some of our most memorable and successful events that showcase our expertise and creativity.\n            </p>\n          </div>\n\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-12\">\n            <Card className=\"overflow-hidden\">\n              <div className=\"relative\">\n                <img \n                  src=\"https://images.unsplash.com/photo-1519225421980-715cb0215aed?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=600\"\n                  alt=\"Featured wedding event\"\n                  className=\"w-full h-64 object-cover\"\n                />\n                <Badge className=\"absolute top-4 left-4\" variant=\"secondary\">\n                  Featured\n                </Badge>\n              </div>\n              <CardContent className=\"p-8\">\n                <h3 className=\"text-2xl font-bold text-slate-800 mb-4\">\n                  Elegant Garden Wedding\n                </h3>\n                <p className=\"text-slate-600 mb-6\">\n                  A breathtaking outdoor wedding celebration featuring custom floral arrangements, string lighting, \n                  and a romantic garden setting for 200 guests.\n                </p>\n                <div className=\"flex flex-wrap gap-2\">\n                  <Badge variant=\"outline\">Wedding</Badge>\n                  <Badge variant=\"outline\">Outdoor</Badge>\n                  <Badge variant=\"outline\">200 Guests</Badge>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card className=\"overflow-hidden\">\n              <div className=\"relative\">\n                <img \n                  src=\"https://images.unsplash.com/photo-1511795409834-ef04bbd61622?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=600\"\n                  alt=\"Featured corporate event\"\n                  className=\"w-full h-64 object-cover\"\n                />\n                <Badge className=\"absolute top-4 left-4\" variant=\"secondary\">\n                  Featured\n                </Badge>\n              </div>\n              <CardContent className=\"p-8\">\n                <h3 className=\"text-2xl font-bold text-slate-800 mb-4\">\n                  Tech Summit Conference\n                </h3>\n                <p className=\"text-slate-600 mb-6\">\n                  A high-tech corporate conference with advanced AV setup, professional staging, \n                  and seamless logistics for 500+ attendees.\n                </p>\n                <div className=\"flex flex-wrap gap-2\">\n                  <Badge variant=\"outline\">Corporate</Badge>\n                  <Badge variant=\"outline\">Conference</Badge>\n                  <Badge variant=\"outline\">500+ Guests</Badge>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </section>\n\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":7417},"client/src/pages/home.tsx":{"content":"import { useEffect } from \"react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport Landing from \"./landing\";\n\nexport default function Home() {\n  const { toast } = useToast();\n  const { isAuthenticated, isLoading } = useAuth();\n\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, isLoading, toast]);\n\n  if (isLoading || !isAuthenticated) {\n    return null;\n  }\n\n  // For authenticated users, show the same landing page content\n  return <Landing />;\n}\n","size_bytes":788},"client/src/pages/landing.tsx":{"content":"import { useState } from \"react\";\nimport { Link } from \"wouter\";\nimport Navbar from \"@/components/layout/navbar\";\nimport Footer from \"@/components/layout/footer\";\nimport QuoteForm from \"@/components/forms/quote-form\";\nimport ServiceCard from \"@/components/ui/service-card\";\nimport GalleryItem from \"@/components/ui/gallery-item\";\nimport BlogCard from \"@/components/ui/blog-card\";\nimport VenueCard from \"@/components/ui/venue-card\";\nimport Chatbot from \"@/components/ui/chatbot\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Calendar, Palette, Wrench, Lightbulb, Monitor, GraduationCap, Star, MapPin, Users, DollarSign } from \"lucide-react\";\n\nconst services = [\n  {\n    id: \"planning\",\n    title: \"Event Planning\",\n    description: \"Complete event planning from concept to execution. Timeline management, vendor coordination, and logistics planning.\",\n    icon: Calendar,\n    features: [\"Timeline Development\", \"Vendor Management\", \"Budget Planning\", \"Day-of Coordination\"],\n    color: \"primary\",\n    image: \"https://images.unsplash.com/photo-1511795409834-ef04bbd61622?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=600\"\n  },\n  {\n    id: \"decoration\",\n    title: \"Decoration & Design\",\n    description: \"Transform your venue with stunning decorations and custom design elements that reflect your style and vision.\",\n    icon: Palette,\n    features: [\"Floral Arrangements\", \"Theme Development\", \"Custom Backdrops\", \"Table Settings\"],\n    color: \"accent\",\n    image: \"https://images.unsplash.com/photo-1519225421980-715cb0215aed?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=600\"\n  },\n  {\n    id: \"rentals\",\n    title: \"Equipment Rentals\",\n    description: \"Premium equipment rentals including furniture, linens, dishes, and specialty items for any event size.\",\n    icon: Wrench,\n    features: [\"Furniture & Seating\", \"Linens & Tableware\", \"Tents & Structures\", \"Specialty Items\"],\n    color: \"secondary\",\n    image: \"https://images.unsplash.com/photo-1540575467063-178a50c2df87?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=600\"\n  },\n  {\n    id: \"lighting\",\n    title: \"Lighting & Audio\",\n    description: \"Professional lighting and sound systems to create the perfect ambiance and ensure crystal clear audio.\",\n    icon: Lightbulb,\n    features: [\"LED Lighting Systems\", \"Sound Systems\", \"Microphones & AV\", \"DJ Equipment\"],\n    color: \"primary\",\n    image: \"https://images.unsplash.com/photo-1493225457124-a3eb161ffa5f?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=600\"\n  },\n  {\n    id: \"staging\",\n    title: \"Staging & Displays\",\n    description: \"Custom staging solutions, LED screens, and display systems for presentations and performances.\",\n    icon: Monitor,\n    features: [\"Custom Stages\", \"LED Video Walls\", \"Projection Systems\", \"Backdrops & Signage\"],\n    color: \"accent\",\n    image: \"https://images.unsplash.com/photo-1556125574-d7f27ec36a06?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=600\"\n  },\n  {\n    id: \"academic\",\n    title: \"Academic Events\",\n    description: \"Specialized services for academic institutions including graduations, conferences, and educational seminars.\",\n    icon: GraduationCap,\n    features: [\"Graduation Ceremonies\", \"Academic Conferences\", \"Educational Seminars\", \"Award Ceremonies\"],\n    color: \"secondary\",\n    image: \"https://images.unsplash.com/photo-1427504494785-3a9ca7044f45?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=600\"\n  }\n];\n\nexport default function Landing() {\n  const [showQuoteForm, setShowQuoteForm] = useState(false);\n  const [galleryFilter, setGalleryFilter] = useState(\"all\");\n\n  const { data: blogPosts, isLoading: blogLoading } = useQuery({\n    queryKey: [\"/api/blog\"],\n  });\n\n  const { data: galleryItems, isLoading: galleryLoading } = useQuery({\n    queryKey: [\"/api/gallery\", galleryFilter],\n    queryFn: async () => {\n      const response = await fetch(`/api/gallery${galleryFilter !== 'all' ? `?category=${galleryFilter}` : ''}`);\n      if (!response.ok) throw new Error('Failed to fetch gallery items');\n      return response.json();\n    },\n  });\n\n  const { data: venues, isLoading: venuesLoading } = useQuery({\n    queryKey: [\"/api/venues\"],\n  });\n\n  const stats = [\n    { label: \"Events Completed\", value: \"500+\", icon: Calendar },\n    { label: \"Happy Clients\", value: \"200+\", icon: Users },\n    { label: \"Years Experience\", value: \"8\", icon: Star },\n    { label: \"Team Members\", value: \"25+\", icon: Users },\n  ];\n\n  const galleryFilters = [\n    { id: \"all\", label: \"All Events\" },\n    { id: \"weddings\", label: \"Weddings\" },\n    { id: \"corporate\", label: \"Corporate\" },\n    { id: \"social\", label: \"Social Events\" },\n    { id: \"academic\", label: \"Academic\" },\n  ];\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <Navbar />\n      \n      {/* Hero Section */}\n      <section className=\"relative bg-slate-800 text-white overflow-hidden\">\n        <div \n          className=\"absolute inset-0 bg-cover bg-center bg-fixed\"\n          style={{\n            backgroundImage: `url('https://images.unsplash.com/photo-1519225421980-715cb0215aed?ixlib=rb-4.0.3&auto=format&fit=crop&w=1920&h=1080')`\n          }}\n        >\n          <div className=\"absolute inset-0 bg-black bg-opacity-50\"></div>\n        </div>\n        \n        <div className=\"relative max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-24 lg:py-32\">\n          <div className=\"text-center\">\n            <h1 className=\"text-4xl md:text-6xl font-bold mb-6 leading-tight\" data-testid=\"hero-title\">\n              Create <span className=\"text-amber-500\">Unforgettable</span><br/>\n              Events & Experiences\n            </h1>\n            <p className=\"text-xl md:text-2xl text-gray-300 mb-8 max-w-3xl mx-auto\" data-testid=\"hero-description\">\n              From intimate celebrations to grand corporate events, we bring your vision to life with professional planning, stunning decoration, and premium equipment.\n            </p>\n            <div className=\"flex flex-col sm:flex-row gap-4 justify-center items-center\">\n              <Button \n                size=\"lg\" \n                className=\"bg-purple-600 hover:bg-purple-700 text-white px-8 py-4 text-lg transform hover:scale-105 transition-all\"\n                onClick={() => setShowQuoteForm(true)}\n                data-testid=\"button-get-quote\"\n              >\n                Get Free Quote\n              </Button>\n              <Button \n                variant=\"outline\" \n                size=\"lg\"\n                className=\"border-white text-white hover:bg-white hover:text-slate-800 px-8 py-4 text-lg\"\n                data-testid=\"button-view-work\"\n              >\n                <Link href=\"#gallery\">View Our Work</Link>\n              </Button>\n            </div>\n            \n            {/* Quick Stats */}\n            <div className=\"mt-16 grid grid-cols-2 md:grid-cols-4 gap-8\">\n              {stats.map((stat, index) => (\n                <div key={index} className=\"text-center\" data-testid={`stat-${index}`}>\n                  <div className=\"text-3xl font-bold text-amber-500\">{stat.value}</div>\n                  <div className=\"text-gray-300\">{stat.label}</div>\n                </div>\n              ))}\n            </div>\n          </div>\n        </div>\n\n        {/* Floating Action Buttons */}\n        <div className=\"fixed bottom-6 right-6 z-40 flex flex-col gap-3\">\n          <Chatbot />\n          <Button\n            className=\"bg-green-500 hover:bg-green-600 text-white p-4 rounded-full shadow-lg\"\n            data-testid=\"button-whatsapp\"\n          >\n            <svg className=\"w-6 h-6\" fill=\"currentColor\" viewBox=\"0 0 24 24\">\n              <path d=\"M17.472 14.382c-.297-.149-1.758-.867-2.03-.967-.273-.099-.471-.148-.67.15-.197.297-.767.966-.94 1.164-.173.199-.347.223-.644.075-.297-.15-1.255-.463-2.39-1.475-.883-.788-1.48-1.761-1.653-2.059-.173-.297-.018-.458.13-.606.134-.133.298-.347.446-.52.149-.174.198-.298.298-.497.099-.198.05-.371-.025-.52-.075-.149-.669-1.612-.916-2.207-.242-.579-.487-.5-.669-.51-.173-.008-.371-.01-.57-.01-.198 0-.52.074-.792.372-.272.297-1.04 1.016-1.04 2.479 0 1.462 1.065 2.875 1.213 3.074.149.198 2.096 3.2 5.077 4.487.709.306 1.262.489 1.694.625.712.227 1.36.195 1.871.118.571-.085 1.758-.719 2.006-1.413.248-.694.248-1.289.173-1.413-.074-.124-.272-.198-.57-.347m-5.421 7.403h-.004a9.87 9.87 0 01-5.031-1.378l-.361-.214-3.741.982.998-3.648-.235-.374a9.86 9.86 0 01-1.51-5.26c.001-5.45 4.436-9.884 9.888-9.884 2.64 0 5.122 1.03 6.988 2.898a9.825 9.825 0 012.893 6.994c-.003 5.45-4.437 9.884-9.885 9.884m8.413-18.297A11.815 11.815 0 0012.05 0C5.495 0 .16 5.335.157 11.892c0 2.096.547 4.142 1.588 5.945L.057 24l6.305-1.654a11.882 11.882 0 005.683 1.448h.005c6.554 0 11.89-5.335 11.893-11.893A11.821 11.821 0 0020.885 3.688\"/>\n            </svg>\n          </Button>\n        </div>\n      </section>\n\n      {/* Services Section */}\n      <section className=\"py-20 bg-white\" id=\"services\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center mb-16\">\n            <h2 className=\"text-4xl md:text-5xl font-bold text-slate-800 mb-6\" data-testid=\"services-title\">Our Services</h2>\n            <p className=\"text-xl text-slate-600 max-w-3xl mx-auto\">\n              Comprehensive event solutions tailored to your needs. From concept to completion, we handle every detail.\n            </p>\n          </div>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8\">\n            {services.map((service) => (\n              <ServiceCard key={service.id} service={service} />\n            ))}\n          </div>\n        </div>\n      </section>\n\n      {/* Quote Request Section */}\n      {showQuoteForm && (\n        <section className=\"py-20 bg-gray-100\" id=\"quote\">\n          <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8\">\n            <div className=\"text-center mb-12\">\n              <h2 className=\"text-4xl md:text-5xl font-bold text-slate-800 mb-6\" data-testid=\"quote-title\">Get Your Free Quote</h2>\n              <p className=\"text-xl text-slate-600\">Tell us about your event and we'll provide a customized quote within 24 hours.</p>\n            </div>\n            <QuoteForm />\n          </div>\n        </section>\n      )}\n\n      {/* Find Venues Section */}\n      <section className=\"py-20 bg-white\" id=\"venues\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center mb-12\">\n            <h2 className=\"text-4xl md:text-5xl font-bold text-slate-800 mb-6\" data-testid=\"venues-title\">Find Event Venues</h2>\n            <p className=\"text-xl text-slate-600 max-w-3xl mx-auto\">\n              Discover the perfect venue for your event. Search by location, capacity, and amenities.\n            </p>\n          </div>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8\">\n            {venuesLoading ? (\n              <div className=\"col-span-full text-center py-8\">\n                <div className=\"text-slate-600\">Loading venues...</div>\n              </div>\n            ) : venues?.length > 0 ? (\n              venues.slice(0, 6).map((venue: any) => (\n                <VenueCard key={venue.id} venue={venue} />\n              ))\n            ) : (\n              <div className=\"col-span-full text-center py-8\">\n                <div className=\"text-slate-600\">No venues available at the moment.</div>\n              </div>\n            )}\n          </div>\n\n          <div className=\"text-center mt-12\">\n            <Button asChild>\n              <Link href=\"/venues\">View All Venues</Link>\n            </Button>\n          </div>\n        </div>\n      </section>\n\n      {/* Gallery Section */}\n      <section className=\"py-20 bg-gray-100\" id=\"gallery\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center mb-12\">\n            <h2 className=\"text-4xl md:text-5xl font-bold text-slate-800 mb-6\" data-testid=\"gallery-title\">Our Portfolio</h2>\n            <p className=\"text-xl text-slate-600 max-w-3xl mx-auto\">\n              Explore our recent events and see how we bring visions to life with creativity and attention to detail.\n            </p>\n          </div>\n\n          {/* Category Filters */}\n          <div className=\"flex flex-wrap justify-center gap-4 mb-12\">\n            {galleryFilters.map((filter) => (\n              <Button\n                key={filter.id}\n                variant={galleryFilter === filter.id ? \"default\" : \"outline\"}\n                onClick={() => setGalleryFilter(filter.id)}\n                data-testid={`filter-${filter.id}`}\n              >\n                {filter.label}\n              </Button>\n            ))}\n          </div>\n\n          {/* Gallery Grid */}\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6\">\n            {galleryLoading ? (\n              <div className=\"col-span-full text-center py-8\">\n                <div className=\"text-slate-600\">Loading gallery...</div>\n              </div>\n            ) : galleryItems?.length > 0 ? (\n              galleryItems.slice(0, 8).map((item: any) => (\n                <GalleryItem key={item.id} item={item} />\n              ))\n            ) : (\n              <div className=\"col-span-full text-center py-8\">\n                <div className=\"text-slate-600\">No gallery items available.</div>\n              </div>\n            )}\n          </div>\n\n          <div className=\"text-center mt-12\">\n            <Button asChild>\n              <Link href=\"/gallery\">View Full Gallery</Link>\n            </Button>\n          </div>\n        </div>\n      </section>\n\n      {/* Blog Section */}\n      <section className=\"py-20 bg-white\" id=\"blog\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center mb-12\">\n            <h2 className=\"text-4xl md:text-5xl font-bold text-slate-800 mb-6\" data-testid=\"blog-title\">Latest from Our Blog</h2>\n            <p className=\"text-xl text-slate-600 max-w-3xl mx-auto\">\n              Get insights, tips, and inspiration for planning the perfect event. Stay updated with the latest trends in event management.\n            </p>\n          </div>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8\">\n            {blogLoading ? (\n              <div className=\"col-span-full text-center py-8\">\n                <div className=\"text-slate-600\">Loading blog posts...</div>\n              </div>\n            ) : blogPosts?.length > 0 ? (\n              blogPosts.slice(0, 6).map((post: any) => (\n                <BlogCard key={post.id} post={post} />\n              ))\n            ) : (\n              <div className=\"col-span-full text-center py-8\">\n                <div className=\"text-slate-600\">No blog posts available.</div>\n              </div>\n            )}\n          </div>\n\n          <div className=\"text-center mt-12\">\n            <Button asChild>\n              <Link href=\"/blog\">Read All Articles</Link>\n            </Button>\n          </div>\n        </div>\n      </section>\n\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":15208},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/services.tsx":{"content":"import Navbar from \"@/components/layout/navbar\";\nimport Footer from \"@/components/layout/footer\";\nimport ServiceCard from \"@/components/ui/service-card\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Calendar, Palette, Wrench, Lightbulb, Monitor, GraduationCap, CheckCircle, Star, Users } from \"lucide-react\";\n\nconst services = [\n  {\n    id: \"planning\",\n    title: \"Event Planning\",\n    description: \"Complete event planning from concept to execution. Timeline management, vendor coordination, and logistics planning.\",\n    icon: Calendar,\n    features: [\"Timeline Development\", \"Vendor Management\", \"Budget Planning\", \"Day-of Coordination\"],\n    color: \"primary\",\n    image: \"https://images.unsplash.com/photo-1511795409834-ef04bbd61622?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=600\"\n  },\n  {\n    id: \"decoration\",\n    title: \"Decoration & Design\",\n    description: \"Transform your venue with stunning decorations and custom design elements that reflect your style and vision.\",\n    icon: Palette,\n    features: [\"Floral Arrangements\", \"Theme Development\", \"Custom Backdrops\", \"Table Settings\"],\n    color: \"accent\",\n    image: \"https://images.unsplash.com/photo-1519225421980-715cb0215aed?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=600\"\n  },\n  {\n    id: \"rentals\",\n    title: \"Equipment Rentals\",\n    description: \"Premium equipment rentals including furniture, linens, dishes, and specialty items for any event size.\",\n    icon: Wrench,\n    features: [\"Furniture & Seating\", \"Linens & Tableware\", \"Tents & Structures\", \"Specialty Items\"],\n    color: \"secondary\",\n    image: \"https://images.unsplash.com/photo-1540575467063-178a50c2df87?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=600\"\n  },\n  {\n    id: \"lighting\",\n    title: \"Lighting & Audio\",\n    description: \"Professional lighting and sound systems to create the perfect ambiance and ensure crystal clear audio.\",\n    icon: Lightbulb,\n    features: [\"LED Lighting Systems\", \"Sound Systems\", \"Microphones & AV\", \"DJ Equipment\"],\n    color: \"primary\",\n    image: \"https://images.unsplash.com/photo-1493225457124-a3eb161ffa5f?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=600\"\n  },\n  {\n    id: \"staging\",\n    title: \"Staging & Displays\",\n    description: \"Custom staging solutions, LED screens, and display systems for presentations and performances.\",\n    icon: Monitor,\n    features: [\"Custom Stages\", \"LED Video Walls\", \"Projection Systems\", \"Backdrops & Signage\"],\n    color: \"accent\",\n    image: \"https://images.unsplash.com/photo-1556125574-d7f27ec36a06?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=600\"\n  },\n  {\n    id: \"academic\",\n    title: \"Academic Events\",\n    description: \"Specialized services for academic institutions including graduations, conferences, and educational seminars.\",\n    icon: GraduationCap,\n    features: [\"Graduation Ceremonies\", \"Academic Conferences\", \"Educational Seminars\", \"Award Ceremonies\"],\n    color: \"secondary\",\n    image: \"https://images.unsplash.com/photo-1427504494785-3a9ca7044f45?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=600\"\n  }\n];\n\nconst processSteps = [\n  {\n    step: 1,\n    title: \"Consultation\",\n    description: \"We start with understanding your vision, requirements, and budget to create a customized plan.\"\n  },\n  {\n    step: 2,\n    title: \"Planning\",\n    description: \"Our team develops detailed timelines, vendor coordination, and logistics management.\"\n  },\n  {\n    step: 3,\n    title: \"Execution\",\n    description: \"We handle all aspects of your event, ensuring everything runs smoothly on the day.\"\n  },\n  {\n    step: 4,\n    title: \"Follow-up\",\n    description: \"After your event, we follow up to ensure satisfaction and gather feedback for future improvements.\"\n  }\n];\n\nconst testimonials = [\n  {\n    name: \"Sarah Johnson\",\n    company: \"Tech Innovations Inc.\",\n    text: \"ROCKTOP made our corporate retreat absolutely perfect. Their attention to detail and professional service exceeded our expectations.\",\n    rating: 5,\n  },\n  {\n    name: \"Michael & Emma Rodriguez\",\n    company: \"Wedding Couple\",\n    text: \"Our dream wedding became reality thanks to ROCKTOP. They handled everything so professionally, allowing us to enjoy our special day.\",\n    rating: 5,\n  },\n  {\n    name: \"Dr. Patricia Wong\",\n    company: \"University of Excellence\",\n    text: \"The graduation ceremony was flawless. ROCKTOP's academic event expertise really showed in their seamless execution.\",\n    rating: 5,\n  }\n];\n\nexport default function Services() {\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <Navbar />\n      \n      {/* Hero Section */}\n      <section className=\"bg-gradient-to-br from-purple-600 to-pink-600 text-white py-20\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 text-center\">\n          <h1 className=\"text-4xl md:text-6xl font-bold mb-6\" data-testid=\"services-hero-title\">\n            Our Services\n          </h1>\n          <p className=\"text-xl md:text-2xl text-purple-100 mb-8 max-w-3xl mx-auto\">\n            Comprehensive event solutions designed to bring your vision to life with excellence and attention to detail.\n          </p>\n          <Button size=\"lg\" variant=\"outline\" className=\"border-white text-white hover:bg-white hover:text-purple-600\" data-testid=\"button-get-quote\">\n            Get Free Consultation\n          </Button>\n        </div>\n      </section>\n\n      {/* Services Grid */}\n      <section className=\"py-20 bg-white\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8\">\n            {services.map((service) => (\n              <ServiceCard key={service.id} service={service} />\n            ))}\n          </div>\n        </div>\n      </section>\n\n      {/* Process Section */}\n      <section className=\"py-20 bg-gray-100\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center mb-16\">\n            <h2 className=\"text-4xl md:text-5xl font-bold text-slate-800 mb-6\" data-testid=\"process-title\">\n              Our Process\n            </h2>\n            <p className=\"text-xl text-slate-600 max-w-3xl mx-auto\">\n              We follow a proven process to ensure your event is perfectly planned and executed.\n            </p>\n          </div>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-8\">\n            {processSteps.map((step, index) => (\n              <Card key={step.step} className=\"text-center relative\" data-testid={`process-step-${step.step}`}>\n                <CardHeader>\n                  <div className=\"mx-auto w-16 h-16 bg-purple-600 text-white rounded-full flex items-center justify-center text-2xl font-bold mb-4\">\n                    {step.step}\n                  </div>\n                  <CardTitle className=\"text-xl\">{step.title}</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <p className=\"text-slate-600\">{step.description}</p>\n                </CardContent>\n                {index < processSteps.length - 1 && (\n                  <div className=\"hidden lg:block absolute top-1/2 -right-4 transform -translate-y-1/2\">\n                    <div className=\"w-8 h-0.5 bg-purple-300\"></div>\n                  </div>\n                )}\n              </Card>\n            ))}\n          </div>\n        </div>\n      </section>\n\n      {/* Why Choose Us */}\n      <section className=\"py-20 bg-white\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-12 items-center\">\n            <div>\n              <h2 className=\"text-4xl md:text-5xl font-bold text-slate-800 mb-6\" data-testid=\"why-choose-title\">\n                Why Choose ROCKTOP?\n              </h2>\n              <p className=\"text-xl text-slate-600 mb-8\">\n                With years of experience and a passion for creating memorable events, we're your trusted partner for any occasion.\n              </p>\n              \n              <div className=\"space-y-6\">\n                <div className=\"flex items-start\">\n                  <CheckCircle className=\"text-green-500 mt-1 mr-4 flex-shrink-0\" />\n                  <div>\n                    <h3 className=\"text-lg font-semibold text-slate-800 mb-2\">Professional Expertise</h3>\n                    <p className=\"text-slate-600\">Our experienced team brings years of industry knowledge to every event.</p>\n                  </div>\n                </div>\n                \n                <div className=\"flex items-start\">\n                  <CheckCircle className=\"text-green-500 mt-1 mr-4 flex-shrink-0\" />\n                  <div>\n                    <h3 className=\"text-lg font-semibold text-slate-800 mb-2\">Full-Service Solutions</h3>\n                    <p className=\"text-slate-600\">From planning to execution, we handle every detail of your event.</p>\n                  </div>\n                </div>\n                \n                <div className=\"flex items-start\">\n                  <CheckCircle className=\"text-green-500 mt-1 mr-4 flex-shrink-0\" />\n                  <div>\n                    <h3 className=\"text-lg font-semibold text-slate-800 mb-2\">Customized Approach</h3>\n                    <p className=\"text-slate-600\">Every event is unique, and we tailor our services to match your vision.</p>\n                  </div>\n                </div>\n                \n                <div className=\"flex items-start\">\n                  <CheckCircle className=\"text-green-500 mt-1 mr-4 flex-shrink-0\" />\n                  <div>\n                    <h3 className=\"text-lg font-semibold text-slate-800 mb-2\">Reliable Partnership</h3>\n                    <p className=\"text-slate-600\">We're committed to delivering excellence and building lasting relationships.</p>\n                  </div>\n                </div>\n              </div>\n            </div>\n            \n            <div className=\"relative\">\n              <img \n                src=\"https://images.unsplash.com/photo-1511795409834-ef04bbd61622?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=600\"\n                alt=\"Event planning team at work\"\n                className=\"rounded-2xl shadow-2xl\"\n                data-testid=\"why-choose-image\"\n              />\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Testimonials */}\n      <section className=\"py-20 bg-gray-100\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center mb-16\">\n            <h2 className=\"text-4xl md:text-5xl font-bold text-slate-800 mb-6\" data-testid=\"testimonials-title\">\n              What Our Clients Say\n            </h2>\n            <p className=\"text-xl text-slate-600 max-w-3xl mx-auto\">\n              Don't just take our word for it. Here's what our satisfied clients have to say about working with us.\n            </p>\n          </div>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8\">\n            {testimonials.map((testimonial, index) => (\n              <Card key={index} className=\"text-center\" data-testid={`testimonial-${index}`}>\n                <CardContent className=\"p-8\">\n                  <div className=\"flex justify-center mb-4\">\n                    {Array.from({ length: 5 }, (_, i) => (\n                      <Star \n                        key={i} \n                        className={`h-5 w-5 ${i < testimonial.rating ? 'text-yellow-400 fill-current' : 'text-gray-300'}`} \n                      />\n                    ))}\n                  </div>\n                  <p className=\"text-slate-600 mb-6 italic\">\"{testimonial.text}\"</p>\n                  <div>\n                    <p className=\"font-semibold text-slate-800\">{testimonial.name}</p>\n                    <p className=\"text-sm text-slate-500\">{testimonial.company}</p>\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </div>\n      </section>\n\n      {/* CTA Section */}\n      <section className=\"py-20 bg-gradient-to-r from-purple-600 to-pink-600 text-white\">\n        <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 text-center\">\n          <h2 className=\"text-4xl md:text-5xl font-bold mb-6\" data-testid=\"cta-title\">\n            Ready to Plan Your Perfect Event?\n          </h2>\n          <p className=\"text-xl text-purple-100 mb-8 max-w-2xl mx-auto\">\n            Let our experienced team help you create an unforgettable experience. Get your free consultation today.\n          </p>\n          <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n            <Button size=\"lg\" variant=\"outline\" className=\"border-white text-white hover:bg-white hover:text-purple-600\" data-testid=\"button-get-consultation\">\n              Get Free Consultation\n            </Button>\n            <Button size=\"lg\" className=\"bg-white text-purple-600 hover:bg-purple-50\" data-testid=\"button-view-portfolio\">\n              View Our Portfolio\n            </Button>\n          </div>\n        </div>\n      </section>\n\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":13169},"client/src/pages/venues.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport Navbar from \"@/components/layout/navbar\";\nimport Footer from \"@/components/layout/footer\";\nimport VenueCard from \"@/components/ui/venue-card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Search, MapPin, Users, Filter } from \"lucide-react\";\n\ninterface VenueFilters {\n  location: string;\n  capacity: string;\n  eventType: string;\n}\n\nexport default function Venues() {\n  const [filters, setFilters] = useState<VenueFilters>({\n    location: \"\",\n    capacity: \"\",\n    eventType: \"\",\n  });\n\n  const { data: venues, isLoading, error } = useQuery({\n    queryKey: [\"/api/venues\", filters],\n    queryFn: async () => {\n      const params = new URLSearchParams();\n      if (filters.location) params.append(\"city\", filters.location);\n      if (filters.capacity && filters.capacity !== \"any\") params.append(\"capacity\", filters.capacity);\n      if (filters.eventType && filters.eventType !== \"any\") params.append(\"eventType\", filters.eventType);\n      \n      const response = await fetch(`/api/venues?${params}`);\n      if (!response.ok) throw new Error(\"Failed to fetch venues\");\n      return response.json();\n    },\n  });\n\n  const handleFilterChange = (key: keyof VenueFilters, value: string) => {\n    setFilters(prev => ({ ...prev, [key]: value }));\n  };\n\n  const clearFilters = () => {\n    setFilters({ location: \"\", capacity: \"\", eventType: \"\" });\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <Navbar />\n      \n      {/* Hero Section */}\n      <section className=\"relative bg-gradient-to-br from-primary to-accent text-white py-20 overflow-hidden\">\n        <div className=\"absolute inset-0 bg-[url('https://images.unsplash.com/photo-1519225421980-715cb0215aed?ixlib=rb-4.0.3&auto=format&fit=crop&w=2070&q=80')] bg-cover bg-center opacity-20\"></div>\n        <div className=\"absolute inset-0 bg-gradient-to-br from-primary/80 to-accent/80\"></div>\n        <div className=\"relative max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 text-center\">\n          <h1 className=\"text-4xl md:text-6xl font-bold mb-6\" data-testid=\"venues-hero-title\">\n            Find Your Perfect Venue\n          </h1>\n          <p className=\"text-xl md:text-2xl text-purple-100 mb-8 max-w-3xl mx-auto\">\n            Discover amazing venues for your event. Search by location, capacity, and amenities to find the perfect space.\n          </p>\n        </div>\n      </section>\n\n      {/* Search and Filters */}\n      <section className=\"py-8 bg-white border-b\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <Card className=\"shadow-lg\" data-testid=\"venue-filters\">\n            <CardContent className=\"p-6\">\n              <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n                <div className=\"relative\">\n                  <MapPin className=\"absolute left-3 top-3 h-5 w-5 text-gray-400\" />\n                  <Input\n                    placeholder=\"City, state, or zip code\"\n                    value={filters.location}\n                    onChange={(e) => handleFilterChange(\"location\", e.target.value)}\n                    className=\"pl-10\"\n                    data-testid=\"filter-location\"\n                  />\n                </div>\n                \n                <Select value={filters.capacity} onValueChange={(value) => handleFilterChange(\"capacity\", value)}>\n                  <SelectTrigger data-testid=\"filter-capacity\">\n                    <Users className=\"h-4 w-4 mr-2\" />\n                    <SelectValue placeholder=\"Any capacity\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"any\">Any capacity</SelectItem>\n                    <SelectItem value=\"1-50\">1-50 guests</SelectItem>\n                    <SelectItem value=\"51-100\">51-100 guests</SelectItem>\n                    <SelectItem value=\"101-200\">101-200 guests</SelectItem>\n                    <SelectItem value=\"201-500\">201-500 guests</SelectItem>\n                    <SelectItem value=\"500+\">500+ guests</SelectItem>\n                  </SelectContent>\n                </Select>\n                \n                <Select value={filters.eventType} onValueChange={(value) => handleFilterChange(\"eventType\", value)}>\n                  <SelectTrigger data-testid=\"filter-event-type\">\n                    <SelectValue placeholder=\"Any event type\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"any\">Any event type</SelectItem>\n                    <SelectItem value=\"wedding\">Wedding</SelectItem>\n                    <SelectItem value=\"corporate\">Corporate</SelectItem>\n                    <SelectItem value=\"social\">Social Event</SelectItem>\n                    <SelectItem value=\"academic\">Academic</SelectItem>\n                  </SelectContent>\n                </Select>\n                \n                <div className=\"flex gap-2\">\n                  <Button \n                    variant=\"outline\" \n                    onClick={clearFilters}\n                    className=\"flex-1\"\n                    data-testid=\"button-clear-filters\"\n                  >\n                    <Filter className=\"h-4 w-4 mr-2\" />\n                    Clear\n                  </Button>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </section>\n\n      {/* Venues Grid */}\n      <section className=\"py-12\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex justify-between items-center mb-8\">\n            <h2 className=\"text-2xl font-bold text-slate-800\" data-testid=\"venues-results-title\">\n              Available Venues\n            </h2>\n            {venues && (\n              <span className=\"text-slate-600\" data-testid=\"venues-count\">\n                {venues.length} venues found\n              </span>\n            )}\n          </div>\n\n          {isLoading ? (\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8\">\n              {Array.from({ length: 6 }, (_, i) => (\n                <Card key={i} className=\"overflow-hidden\">\n                  <div className=\"w-full h-48 bg-gray-200 animate-pulse\" />\n                  <CardContent className=\"p-6\">\n                    <div className=\"space-y-3\">\n                      <div className=\"h-6 bg-gray-200 animate-pulse rounded\" />\n                      <div className=\"h-4 bg-gray-200 animate-pulse rounded w-2/3\" />\n                      <div className=\"h-4 bg-gray-200 animate-pulse rounded w-1/2\" />\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          ) : error ? (\n            <div className=\"text-center py-12\" data-testid=\"venues-error\">\n              <div className=\"text-red-500 mb-4\">Failed to load venues</div>\n              <Button onClick={() => window.location.reload()}>\n                Try Again\n              </Button>\n            </div>\n          ) : venues && venues.length > 0 ? (\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8\">\n              {venues.map((venue: any) => (\n                <VenueCard key={venue.id} venue={venue} />\n              ))}\n            </div>\n          ) : (\n            <div className=\"text-center py-12\" data-testid=\"venues-empty\">\n              <div className=\"text-slate-600 mb-4\">\n                No venues found matching your criteria.\n              </div>\n              <Button onClick={clearFilters}>Clear Filters</Button>\n            </div>\n          )}\n        </div>\n      </section>\n\n      {/* Map Section Placeholder */}\n      <section className=\"py-12 bg-gray-100\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <h2 className=\"text-2xl font-bold text-slate-800 mb-8 text-center\">\n            Venues Map View\n          </h2>\n          <div className=\"bg-gray-200 rounded-2xl h-96 flex items-center justify-center\">\n            <div className=\"text-center text-slate-600\">\n              <MapPin className=\"h-12 w-12 mx-auto mb-4 text-primary\" />\n              <p className=\"text-lg font-medium\">Interactive Map</p>\n              <p className=\"text-sm\">Google Maps integration shows venue locations</p>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":8599},"client/src/components/forms/contact-form.tsx":{"content":"import { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { z } from \"zod\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Send } from \"lucide-react\";\n\nconst contactFormSchema = z.object({\n  firstName: z.string().min(1, \"First name is required\"),\n  lastName: z.string().min(1, \"Last name is required\"),\n  email: z.string().email(\"Valid email is required\"),\n  phone: z.string().optional(),\n  subject: z.string().min(1, \"Subject is required\"),\n  message: z.string().min(1, \"Message is required\"),\n});\n\ntype ContactFormData = z.infer<typeof contactFormSchema>;\n\nexport default function ContactForm() {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const form = useForm<ContactFormData>({\n    resolver: zodResolver(contactFormSchema),\n    defaultValues: {\n      firstName: \"\",\n      lastName: \"\",\n      email: \"\",\n      phone: \"\",\n      subject: \"\",\n      message: \"\",\n    },\n  });\n\n  const createContactMutation = useMutation({\n    mutationFn: async (data: ContactFormData) => {\n      return apiRequest(\"POST\", \"/api/contact\", data);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Message Sent!\",\n        description: \"We'll get back to you as soon as possible.\",\n      });\n      form.reset();\n      queryClient.invalidateQueries({ queryKey: [\"/api/contact\"] });\n    },\n    onError: (error) => {\n      console.error(\"Error sending message:\", error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to send message. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: ContactFormData) => {\n    createContactMutation.mutate(data);\n  };\n\n  return (\n    <Card className=\"w-full\" data-testid=\"contact-form\">\n      <CardHeader>\n        <CardTitle className=\"text-2xl\">Send us a message</CardTitle>\n        <p className=\"text-slate-600\">We'd love to hear from you. Send us a message and we'll respond as soon as possible.</p>\n      </CardHeader>\n      <CardContent>\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n              <FormField\n                control={form.control}\n                name=\"firstName\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>First Name *</FormLabel>\n                    <FormControl>\n                      <Input placeholder=\"John\" {...field} data-testid=\"input-first-name\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              \n              <FormField\n                control={form.control}\n                name=\"lastName\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Last Name *</FormLabel>\n                    <FormControl>\n                      <Input placeholder=\"Doe\" {...field} data-testid=\"input-last-name\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            <FormField\n              control={form.control}\n              name=\"email\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Email Address *</FormLabel>\n                  <FormControl>\n                    <Input type=\"email\" placeholder=\"john@example.com\" {...field} data-testid=\"input-email\" />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"phone\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Phone Number</FormLabel>\n                  <FormControl>\n                    <Input type=\"tel\" placeholder=\"(555) 123-4567\" {...field} data-testid=\"input-phone\" />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"subject\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Subject *</FormLabel>\n                  <Select onValueChange={field.onChange} defaultValue={field.value}>\n                    <FormControl>\n                      <SelectTrigger data-testid=\"select-subject\">\n                        <SelectValue placeholder=\"Select a subject\" />\n                      </SelectTrigger>\n                    </FormControl>\n                    <SelectContent>\n                      <SelectItem value=\"quote\">Request a Quote</SelectItem>\n                      <SelectItem value=\"consultation\">Free Consultation</SelectItem>\n                      <SelectItem value=\"partnership\">Partnership Inquiry</SelectItem>\n                      <SelectItem value=\"support\">Customer Support</SelectItem>\n                      <SelectItem value=\"other\">Other</SelectItem>\n                    </SelectContent>\n                  </Select>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"message\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Message *</FormLabel>\n                  <FormControl>\n                    <Textarea \n                      rows={5}\n                      placeholder=\"Tell us about your event or how we can help you...\"\n                      {...field}\n                      data-testid=\"textarea-message\"\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <Button \n              type=\"submit\" \n              className=\"w-full bg-primary hover:bg-primary/90\"\n              disabled={createContactMutation.isPending}\n              data-testid=\"button-send-message\"\n            >\n              {createContactMutation.isPending ? (\n                \"Sending...\"\n              ) : (\n                <>\n                  <Send className=\"mr-2 h-4 w-4\" />\n                  Send Message\n                </>\n              )}\n            </Button>\n          </form>\n        </Form>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":7029},"client/src/components/forms/quote-form.tsx":{"content":"import { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { z } from \"zod\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\n\nconst quoteFormSchema = z.object({\n  eventType: z.string().min(1, \"Event type is required\"),\n  guestCount: z.string().min(1, \"Guest count is required\"),\n  eventDate: z.string().min(1, \"Event date is required\"),\n  budget: z.string().min(1, \"Budget range is required\"),\n  venue: z.string().optional(),\n  services: z.object({\n    planning: z.boolean().default(false),\n    decoration: z.boolean().default(false),\n    rentals: z.boolean().default(false),\n    lighting: z.boolean().default(false),\n    staging: z.boolean().default(false),\n    academic: z.boolean().default(false),\n  }),\n  name: z.string().min(1, \"Name is required\"),\n  email: z.string().email(\"Valid email is required\"),\n  phone: z.string().min(1, \"Phone number is required\"),\n  contactMethod: z.string().default(\"email\"),\n  details: z.string().optional(),\n});\n\ntype QuoteFormData = z.infer<typeof quoteFormSchema>;\n\nexport default function QuoteForm() {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const form = useForm<QuoteFormData>({\n    resolver: zodResolver(quoteFormSchema),\n    defaultValues: {\n      eventType: \"\",\n      guestCount: \"\",\n      eventDate: \"\",\n      budget: \"\",\n      venue: \"\",\n      services: {\n        planning: false,\n        decoration: false,\n        rentals: false,\n        lighting: false,\n        staging: false,\n        academic: false,\n      },\n      name: \"\",\n      email: \"\",\n      phone: \"\",\n      contactMethod: \"email\",\n      details: \"\",\n    },\n  });\n\n  const createQuoteMutation = useMutation({\n    mutationFn: async (data: QuoteFormData) => {\n      return apiRequest(\"POST\", \"/api/quotes\", {\n        ...data,\n        eventDate: new Date(data.eventDate).toISOString(),\n      });\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Quote Request Submitted!\",\n        description: \"We'll review your request and provide a detailed quote within 24 hours.\",\n      });\n      form.reset();\n      queryClient.invalidateQueries({ queryKey: [\"/api/quotes\"] });\n    },\n    onError: (error) => {\n      console.error(\"Error submitting quote:\", error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to submit quote request. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: QuoteFormData) => {\n    createQuoteMutation.mutate(data);\n  };\n\n  const serviceOptions = [\n    { id: \"planning\", label: \"Event Planning\", description: \"Complete planning and coordination\" },\n    { id: \"decoration\", label: \"Decoration & Design\", description: \"Custom decorations and themes\" },\n    { id: \"rentals\", label: \"Equipment Rentals\", description: \"Furniture, linens, and more\" },\n    { id: \"lighting\", label: \"Lighting & Audio\", description: \"Professional lighting and sound\" },\n    { id: \"staging\", label: \"Staging & Displays\", description: \"Stages and visual displays\" },\n    { id: \"academic\", label: \"Academic Events\", description: \"Educational and institutional events\" },\n  ];\n\n  return (\n    <Card className=\"w-full max-w-4xl mx-auto\" data-testid=\"quote-form\">\n      <CardHeader>\n        <CardTitle className=\"text-2xl text-center\">Get Your Free Quote</CardTitle>\n        <p className=\"text-center text-slate-600\">Tell us about your event and we'll provide a customized quote within 24 hours.</p>\n      </CardHeader>\n      <CardContent>\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-8\">\n            {/* Event Details */}\n            <div className=\"space-y-6\">\n              <h3 className=\"text-xl font-semibold text-slate-800\">Event Details</h3>\n              \n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                <FormField\n                  control={form.control}\n                  name=\"eventType\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Event Type *</FormLabel>\n                      <Select onValueChange={field.onChange} defaultValue={field.value}>\n                        <FormControl>\n                          <SelectTrigger data-testid=\"input-event-type\">\n                            <SelectValue placeholder=\"Select event type\" />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          <SelectItem value=\"wedding\">Wedding</SelectItem>\n                          <SelectItem value=\"corporate\">Corporate Event</SelectItem>\n                          <SelectItem value=\"birthday\">Birthday Party</SelectItem>\n                          <SelectItem value=\"graduation\">Graduation</SelectItem>\n                          <SelectItem value=\"conference\">Conference</SelectItem>\n                          <SelectItem value=\"other\">Other</SelectItem>\n                        </SelectContent>\n                      </Select>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                \n                <FormField\n                  control={form.control}\n                  name=\"guestCount\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Number of Guests *</FormLabel>\n                      <Select onValueChange={field.onChange} defaultValue={field.value}>\n                        <FormControl>\n                          <SelectTrigger data-testid=\"input-guest-count\">\n                            <SelectValue placeholder=\"Select guest count\" />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          <SelectItem value=\"1-50\">1-50</SelectItem>\n                          <SelectItem value=\"51-100\">51-100</SelectItem>\n                          <SelectItem value=\"101-200\">101-200</SelectItem>\n                          <SelectItem value=\"201-500\">201-500</SelectItem>\n                          <SelectItem value=\"500+\">500+</SelectItem>\n                        </SelectContent>\n                      </Select>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </div>\n\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                <FormField\n                  control={form.control}\n                  name=\"eventDate\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Event Date *</FormLabel>\n                      <FormControl>\n                        <Input type=\"date\" {...field} data-testid=\"input-event-date\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                \n                <FormField\n                  control={form.control}\n                  name=\"budget\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Budget Range *</FormLabel>\n                      <Select onValueChange={field.onChange} defaultValue={field.value}>\n                        <FormControl>\n                          <SelectTrigger data-testid=\"input-budget\">\n                            <SelectValue placeholder=\"Select budget range\" />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          <SelectItem value=\"5000-10000\">$5,000 - $10,000</SelectItem>\n                          <SelectItem value=\"10000-25000\">$10,000 - $25,000</SelectItem>\n                          <SelectItem value=\"25000-50000\">$25,000 - $50,000</SelectItem>\n                          <SelectItem value=\"50000+\">$50,000+</SelectItem>\n                        </SelectContent>\n                      </Select>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </div>\n\n              <FormField\n                control={form.control}\n                name=\"venue\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Venue</FormLabel>\n                    <FormControl>\n                      <Input \n                        placeholder=\"Venue name or 'Need venue recommendation'\" \n                        {...field} \n                        data-testid=\"input-venue\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            {/* Services Needed */}\n            <div className=\"space-y-6 border-t pt-8\">\n              <h3 className=\"text-xl font-semibold text-slate-800\">Services Needed</h3>\n              \n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                {serviceOptions.map((service) => (\n                  <FormField\n                    key={service.id}\n                    control={form.control}\n                    name={`services.${service.id as keyof typeof form.control._defaultValues.services}`}\n                    render={({ field }) => (\n                      <FormItem className=\"flex flex-row items-start space-x-3 space-y-0 p-4 border rounded-lg\">\n                        <FormControl>\n                          <Checkbox\n                            checked={field.value}\n                            onCheckedChange={field.onChange}\n                            data-testid={`service-${service.id}`}\n                          />\n                        </FormControl>\n                        <div className=\"space-y-1 leading-none\">\n                          <FormLabel className=\"font-medium\">{service.label}</FormLabel>\n                          <p className=\"text-sm text-slate-600\">{service.description}</p>\n                        </div>\n                      </FormItem>\n                    )}\n                  />\n                ))}\n              </div>\n            </div>\n\n            {/* Contact Information */}\n            <div className=\"space-y-6 border-t pt-8\">\n              <h3 className=\"text-xl font-semibold text-slate-800\">Contact Information</h3>\n              \n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                <FormField\n                  control={form.control}\n                  name=\"name\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Full Name *</FormLabel>\n                      <FormControl>\n                        <Input placeholder=\"Your full name\" {...field} data-testid=\"input-name\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                \n                <FormField\n                  control={form.control}\n                  name=\"email\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Email Address *</FormLabel>\n                      <FormControl>\n                        <Input type=\"email\" placeholder=\"your@email.com\" {...field} data-testid=\"input-email\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </div>\n\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                <FormField\n                  control={form.control}\n                  name=\"phone\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Phone Number *</FormLabel>\n                      <FormControl>\n                        <Input type=\"tel\" placeholder=\"(555) 123-4567\" {...field} data-testid=\"input-phone\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                \n                <FormField\n                  control={form.control}\n                  name=\"contactMethod\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Preferred Contact Method</FormLabel>\n                      <Select onValueChange={field.onChange} defaultValue={field.value}>\n                        <FormControl>\n                          <SelectTrigger data-testid=\"input-contact-method\">\n                            <SelectValue />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          <SelectItem value=\"email\">Email</SelectItem>\n                          <SelectItem value=\"phone\">Phone</SelectItem>\n                          <SelectItem value=\"text\">Text Message</SelectItem>\n                        </SelectContent>\n                      </Select>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </div>\n\n              <FormField\n                control={form.control}\n                name=\"details\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Additional Details</FormLabel>\n                    <FormControl>\n                      <Textarea \n                        placeholder=\"Tell us more about your vision, specific requirements, or any questions you have...\"\n                        className=\"min-h-[100px]\"\n                        {...field}\n                        data-testid=\"input-details\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            {/* Submit Button */}\n            <div className=\"flex flex-col sm:flex-row gap-4 pt-6\">\n              <Button \n                type=\"submit\" \n                className=\"flex-1 bg-purple-600 hover:bg-purple-700 py-6\"\n                disabled={createQuoteMutation.isPending}\n                data-testid=\"button-submit-quote\"\n              >\n                {createQuoteMutation.isPending ? \"Submitting...\" : \"Get My Free Quote\"}\n              </Button>\n            </div>\n\n            <p className=\"text-sm text-slate-600 text-center\">\n              We'll review your request and provide a detailed quote within 24 hours. Your information is kept confidential.\n            </p>\n          </form>\n        </Form>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":15321},"client/src/components/layout/footer.tsx":{"content":"import { Link } from \"wouter\";\n\nexport default function Footer() {\n  const services = [\n    \"Event Planning\",\n    \"Decoration & Design\",\n    \"Equipment Rentals\",\n    \"Lighting & Audio\",\n    \"Staging & Displays\",\n    \"Academic Events\",\n  ];\n\n  const quickLinks = [\n    { name: \"Home\", href: \"/\" },\n    { name: \"Get Quote\", href: \"#quote\" },\n    { name: \"Find Venues\", href: \"/venues\" },\n    { name: \"Portfolio\", href: \"/gallery\" },\n    { name: \"Blog\", href: \"/blog\" },\n    { name: \"Contact\", href: \"/contact\" },\n  ];\n\n  const socialLinks = [\n    { name: \"Facebook\", icon: \"facebook-f\", href: \"#\" },\n    { name: \"Instagram\", icon: \"instagram\", href: \"#\" },\n    { name: \"Twitter\", icon: \"twitter\", href: \"#\" },\n    { name: \"LinkedIn\", icon: \"linkedin-in\", href: \"#\" },\n  ];\n\n  return (\n    <footer className=\"bg-slate-800 text-white py-16\" data-testid=\"footer\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-8\">\n          {/* Company Info */}\n          <div>\n            <div className=\"mb-6\">\n              <span className=\"text-3xl font-bold text-purple-400\">ROCKTOP</span>\n              <span className=\"text-lg text-gray-300 block -mt-1\">PREMIUM EVENTS</span>\n            </div>\n            <p className=\"text-gray-300 mb-6\">\n              Creating unforgettable events and experiences with professional planning, stunning decoration, and premium equipment.\n            </p>\n            <div className=\"flex space-x-4\">\n              {socialLinks.map((social) => (\n                <a\n                  key={social.name}\n                  href={social.href}\n                  className=\"text-gray-400 hover:text-purple-400 transition-colors\"\n                  data-testid={`social-${social.name.toLowerCase()}`}\n                >\n                  <i className={`fab fa-${social.icon} text-xl`}></i>\n                </a>\n              ))}\n            </div>\n          </div>\n\n          {/* Services */}\n          <div>\n            <h3 className=\"text-xl font-bold mb-6\">Services</h3>\n            <ul className=\"space-y-3\">\n              {services.map((service) => (\n                <li key={service}>\n                  <Link \n                    href=\"/services\" \n                    className=\"text-gray-300 hover:text-purple-400 transition-colors\"\n                    data-testid={`service-link-${service.toLowerCase().replace(/[^a-z0-9]/g, '-')}`}\n                  >\n                    {service}\n                  </Link>\n                </li>\n              ))}\n            </ul>\n          </div>\n\n          {/* Quick Links */}\n          <div>\n            <h3 className=\"text-xl font-bold mb-6\">Quick Links</h3>\n            <ul className=\"space-y-3\">\n              {quickLinks.map((link) => (\n                <li key={link.name}>\n                  <Link \n                    href={link.href} \n                    className=\"text-gray-300 hover:text-purple-400 transition-colors\"\n                    data-testid={`quick-link-${link.name.toLowerCase().replace(' ', '-')}`}\n                  >\n                    {link.name}\n                  </Link>\n                </li>\n              ))}\n            </ul>\n          </div>\n\n          {/* Contact Info */}\n          <div>\n            <h3 className=\"text-xl font-bold mb-6\">Contact</h3>\n            <div className=\"space-y-4\">\n              <div>\n                <div className=\"flex items-center mb-2\">\n                  <i className=\"fas fa-map-marker-alt text-purple-400 mr-3\"></i>\n                  <span className=\"text-gray-300\">Office Location</span>\n                </div>\n                <p className=\"text-gray-400 ml-6\" data-testid=\"contact-address\">\n                  123 Event Plaza, Suite 456<br />\n                  Downtown City, ST 12345\n                </p>\n              </div>\n              \n              <div>\n                <div className=\"flex items-center mb-2\">\n                  <i className=\"fas fa-phone text-purple-400 mr-3\"></i>\n                  <span className=\"text-gray-300\">Phone</span>\n                </div>\n                <p className=\"text-gray-400 ml-6\" data-testid=\"contact-phone\">(555) 123-4567</p>\n              </div>\n              \n              <div>\n                <div className=\"flex items-center mb-2\">\n                  <i className=\"fas fa-envelope text-purple-400 mr-3\"></i>\n                  <span className=\"text-gray-300\">Email</span>\n                </div>\n                <p className=\"text-gray-400 ml-6\" data-testid=\"contact-email\">info@rocktoppremium.com</p>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* Bottom Footer */}\n        <div className=\"border-t border-gray-700 pt-8 mt-12\">\n          <div className=\"flex flex-col md:flex-row justify-between items-center\">\n            <p className=\"text-gray-400 text-sm\" data-testid=\"copyright\">\n              &copy; 2024 ROCKTOP PREMIUM EVENTS. All rights reserved.\n            </p>\n            <div className=\"flex space-x-6 mt-4 md:mt-0\">\n              <a href=\"#\" className=\"text-gray-400 hover:text-purple-400 text-sm transition-colors\" data-testid=\"privacy-link\">\n                Privacy Policy\n              </a>\n              <a href=\"#\" className=\"text-gray-400 hover:text-purple-400 text-sm transition-colors\" data-testid=\"terms-link\">\n                Terms of Service\n              </a>\n              <a href=\"#\" className=\"text-gray-400 hover:text-purple-400 text-sm transition-colors\" data-testid=\"cookie-link\">\n                Cookie Policy\n              </a>\n            </div>\n          </div>\n        </div>\n      </div>\n    </footer>\n  );\n}\n","size_bytes":5655},"client/src/components/layout/navbar.tsx":{"content":"import { useState } from \"react\";\nimport { Link, useLocation } from \"wouter\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { Button } from \"@/components/ui/button\";\nimport { Sheet, SheetContent, SheetTrigger } from \"@/components/ui/sheet\";\nimport { Menu } from \"lucide-react\";\n\nfunction LogoutButton({ mobile = false, onLogout }: { mobile?: boolean; onLogout?: () => void }) {\n  const { logoutMutation } = useAuth();\n  \n  const handleLogout = () => {\n    onLogout?.();\n    logoutMutation.mutate();\n  };\n\n  return (\n    <Button \n      variant=\"outline\" \n      className={mobile ? \"w-full\" : \"\"}\n      onClick={handleLogout}\n      data-testid={mobile ? \"mobile-button-logout\" : \"button-logout\"}\n    >\n      Logout\n    </Button>\n  );\n}\n\nexport default function Navbar() {\n  const [isOpen, setIsOpen] = useState(false);\n  const [location] = useLocation();\n  const { isAuthenticated, isLoading, user } = useAuth();\n\n  const navigation = [\n    { name: \"Home\", href: \"/\" },\n    { name: \"Services\", href: \"/services\" },\n    { name: \"Find Venues\", href: \"/venues\" },\n    { name: \"Gallery\", href: \"/gallery\" },\n    { name: \"Blog\", href: \"/blog\" },\n    { name: \"Contact\", href: \"/contact\" },\n  ];\n\n  const isActive = (href: string) => {\n    if (href === \"/\" && location === \"/\") return true;\n    if (href !== \"/\" && location.startsWith(href)) return true;\n    return false;\n  };\n\n  return (\n    <nav className=\"bg-white shadow-sm sticky top-0 z-50\" data-testid=\"navbar\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"flex justify-between items-center h-16\">\n          <div className=\"flex items-center\">\n            <Link href=\"/\" className=\"flex-shrink-0\" data-testid=\"logo\">\n              <span className=\"text-2xl font-bold text-purple-600\">ROCKTOP</span>\n              <span className=\"text-sm text-slate-600 block -mt-1\">PREMIUM EVENTS</span>\n            </Link>\n          </div>\n          \n          {/* Desktop Menu */}\n          <div className=\"hidden md:block\">\n            <div className=\"ml-10 flex items-baseline space-x-8\">\n              {navigation.map((item) => (\n                <Link\n                  key={item.name}\n                  href={item.href}\n                  className={`px-3 py-2 text-sm font-medium transition-colors ${\n                    isActive(item.href)\n                      ? \"text-slate-800 font-semibold\"\n                      : \"text-slate-600 hover:text-purple-600\"\n                  }`}\n                  data-testid={`nav-${item.name.toLowerCase().replace(' ', '-')}`}\n                >\n                  {item.name}\n                </Link>\n              ))}\n            </div>\n          </div>\n\n          {/* Auth Buttons */}\n          <div className=\"hidden md:flex items-center space-x-4\">\n            {isLoading ? (\n              <div className=\"text-sm text-slate-600\">Loading...</div>\n            ) : isAuthenticated ? (\n              <>\n                <div className=\"flex items-center space-x-3\">\n                  <span className=\"text-sm text-slate-700\" data-testid=\"user-name\">\n                    Admin\n                  </span>\n                </div>\n                <Button asChild>\n                  <Link href=\"/admin\" data-testid=\"button-admin\">Dashboard</Link>\n                </Button>\n                <LogoutButton />\n              </>\n            ) : (\n              <>\n                <Button asChild>\n                  <Link href=\"/contact\" data-testid=\"button-get-quote\">\n                    Get Quote\n                  </Link>\n                </Button>\n              </>\n            )}\n          </div>\n\n          {/* Mobile menu button */}\n          <div className=\"md:hidden\">\n            <Sheet open={isOpen} onOpenChange={setIsOpen}>\n              <SheetTrigger asChild>\n                <Button variant=\"ghost\" size=\"sm\" data-testid=\"mobile-menu-button\">\n                  <Menu className=\"h-6 w-6\" />\n                </Button>\n              </SheetTrigger>\n              <SheetContent side=\"right\" className=\"w-[300px]\">\n                <div className=\"flex flex-col space-y-4 mt-8\">\n                  {navigation.map((item) => (\n                    <Link\n                      key={item.name}\n                      href={item.href}\n                      className={`block px-3 py-2 text-base font-medium transition-colors ${\n                        isActive(item.href)\n                          ? \"text-slate-800 font-semibold\"\n                          : \"text-slate-600 hover:text-purple-600\"\n                      }`}\n                      onClick={() => setIsOpen(false)}\n                      data-testid={`mobile-nav-${item.name.toLowerCase().replace(' ', '-')}`}\n                    >\n                      {item.name}\n                    </Link>\n                  ))}\n                  \n                  <div className=\"border-t pt-4 mt-4\">\n                    {isAuthenticated ? (\n                      <>\n                        <div className=\"px-3 py-2\">\n                          <div className=\"text-sm text-slate-700\">\n                            Admin\n                          </div>\n                        </div>\n                        <Button \n                          className=\"w-full mb-2\" \n                          asChild\n                          onClick={() => setIsOpen(false)}\n                        >\n                          <Link href=\"/admin\">Dashboard</Link>\n                        </Button>\n                        <LogoutButton mobile onLogout={() => setIsOpen(false)} />\n                      </>\n                    ) : (\n                      <>\n                        <Button \n                          className=\"w-full mb-2\"\n                          asChild\n                          onClick={() => setIsOpen(false)}\n                        >\n                          <Link href=\"/contact\">Get Quote</Link>\n                        </Button>\n                      </>\n                    )}\n                  </div>\n                </div>\n              </SheetContent>\n            </Sheet>\n          </div>\n        </div>\n      </div>\n    </nav>\n  );\n}\n","size_bytes":6116},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/blog-card.tsx":{"content":"import { Link } from \"wouter\";\nimport { Card, CardContent, CardHeader } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Calendar, Clock, User } from \"lucide-react\";\n\ninterface BlogCardProps {\n  post: {\n    id: string;\n    title: string;\n    excerpt: string;\n    slug: string;\n    category: string;\n    featuredImage?: string;\n    publishedAt?: string;\n    createdAt: string;\n  };\n}\n\nexport default function BlogCard({ post }: BlogCardProps) {\n  const publishDate = new Date(post.publishedAt || post.createdAt);\n  const defaultImage = 'https://images.unsplash.com/photo-1511795409834-ef04bbd61622?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=400';\n  \n  const categoryColors: { [key: string]: string } = {\n    'Corporate': 'bg-amber-500',\n    'Design': 'bg-pink-500',\n    'Planning': 'bg-purple-600',\n    'Technology': 'bg-green-600',\n    'Sustainability': 'bg-green-500',\n    'Catering': 'bg-orange-500',\n  };\n  \n  return (\n    <Card className=\"overflow-hidden hover:shadow-xl transition-shadow\" data-testid={`blog-card-${post.id}`}>\n      <div className=\"relative\">\n        <img \n          src={post.featuredImage || defaultImage}\n          alt={post.title}\n          className=\"w-full h-48 object-cover\"\n          data-testid={`blog-image-${post.id}`}\n        />\n      </div>\n      \n      <CardContent className=\"p-6\">\n        <div className=\"flex items-center text-sm text-slate-600 mb-3\">\n          <Badge \n            className={`mr-3 text-white ${categoryColors[post.category] || 'bg-slate-500'}`}\n            data-testid={`blog-category-${post.id}`}\n          >\n            {post.category}\n          </Badge>\n          <div className=\"flex items-center\">\n            <Calendar className=\"h-4 w-4 mr-1\" />\n            <span data-testid={`blog-date-${post.id}`}>\n              {publishDate.toLocaleDateString('en-US', { \n                month: 'short', \n                day: 'numeric', \n                year: 'numeric' \n              })}\n            </span>\n          </div>\n        </div>\n        \n        <h3 className=\"text-xl font-bold text-slate-800 mb-3 line-clamp-2\" data-testid={`blog-title-${post.id}`}>\n          {post.title}\n        </h3>\n        \n        <p className=\"text-slate-600 mb-4 line-clamp-3\" data-testid={`blog-excerpt-${post.id}`}>\n          {post.excerpt}\n        </p>\n        \n        <Button \n          variant=\"ghost\" \n          className=\"text-purple-600 font-semibold hover:text-purple-800 p-0\"\n          asChild\n          data-testid={`button-read-post-${post.id}`}\n        >\n          <Link href={`/blog/${post.slug}`}>\n            Read More →\n          </Link>\n        </Button>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":2743},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/chatbot.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { MessageCircle, X, Send, Bot, User } from \"lucide-react\";\n\ninterface Message {\n  id: string;\n  type: 'bot' | 'user';\n  content: string;\n  timestamp: Date;\n}\n\nexport default function Chatbot() {\n  const [isOpen, setIsOpen] = useState(false);\n  const [messages, setMessages] = useState<Message[]>([\n    {\n      id: '1',\n      type: 'bot',\n      content: \"Hi! I'm here to help you plan your perfect event. What type of event are you planning?\",\n      timestamp: new Date(),\n    },\n  ]);\n  const [inputValue, setInputValue] = useState('');\n\n  const quickActions = [\n    { label: 'Get Quote', action: 'quote' },\n    { label: 'Find Venues', action: 'venues' },\n    { label: 'Our Services', action: 'services' },\n  ];\n\n  const handleSendMessage = () => {\n    if (!inputValue.trim()) return;\n\n    const userMessage: Message = {\n      id: Date.now().toString(),\n      type: 'user',\n      content: inputValue,\n      timestamp: new Date(),\n    };\n\n    setMessages(prev => [...prev, userMessage]);\n    setInputValue('');\n\n    // Simulate bot response\n    setTimeout(() => {\n      const botResponse: Message = {\n        id: (Date.now() + 1).toString(),\n        type: 'bot',\n        content: \"Thank you for your message! Our event specialists will help you create something amazing. Would you like me to connect you with one of our planners?\",\n        timestamp: new Date(),\n      };\n      setMessages(prev => [...prev, botResponse]);\n    }, 1000);\n  };\n\n  const handleQuickAction = (action: string) => {\n    const userMessage: Message = {\n      id: Date.now().toString(),\n      type: 'user',\n      content: quickActions.find(a => a.action === action)?.label || '',\n      timestamp: new Date(),\n    };\n\n    setMessages(prev => [...prev, userMessage]);\n\n    // Simulate bot response based on action\n    setTimeout(() => {\n      let botContent = '';\n      switch (action) {\n        case 'quote':\n          botContent = \"I'd be happy to help you get a quote! Please tell me about your event type, guest count, and preferred date.\";\n          break;\n        case 'venues':\n          botContent = \"Great! What city are you looking for venues in? Also, how many guests will you be hosting?\";\n          break;\n        case 'services':\n          botContent = \"We offer event planning, decoration & design, equipment rentals, lighting & audio, staging, and academic event services. Which interests you most?\";\n          break;\n        default:\n          botContent = \"How can I assist you today?\";\n      }\n      \n      const botResponse: Message = {\n        id: (Date.now() + 1).toString(),\n        type: 'bot',\n        content: botContent,\n        timestamp: new Date(),\n      };\n      setMessages(prev => [...prev, botResponse]);\n    }, 1000);\n  };\n\n  const handleKeyPress = (e: React.KeyboardEvent) => {\n    if (e.key === 'Enter') {\n      handleSendMessage();\n    }\n  };\n\n  return (\n    <>\n      {/* Chatbot Toggle Button */}\n      <Button\n        className=\"bg-purple-600 hover:bg-purple-700 text-white p-4 rounded-full shadow-lg transition-all transform hover:scale-110\"\n        onClick={() => setIsOpen(true)}\n        data-testid=\"chatbot-toggle\"\n      >\n        <MessageCircle className=\"h-6 w-6\" />\n      </Button>\n\n      {/* Chatbot Modal */}\n      {isOpen && (\n        <div className=\"fixed inset-0 bg-black bg-opacity-50 z-50 flex items-center justify-center p-4\">\n          <Card className=\"w-full max-w-md max-h-[600px] flex flex-col\" data-testid=\"chatbot-modal\">\n            <CardHeader className=\"bg-purple-600 text-white rounded-t-lg\">\n              <div className=\"flex items-center justify-between\">\n                <div className=\"flex items-center\">\n                  <div className=\"w-10 h-10 bg-white bg-opacity-20 rounded-full flex items-center justify-center mr-3\">\n                    <Bot className=\"h-5 w-5\" />\n                  </div>\n                  <div>\n                    <CardTitle className=\"text-lg\">Event Assistant</CardTitle>\n                    <p className=\"text-sm text-purple-200\">Online now</p>\n                  </div>\n                </div>\n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  className=\"text-white hover:text-purple-200 hover:bg-white hover:bg-opacity-10\"\n                  onClick={() => setIsOpen(false)}\n                  data-testid=\"chatbot-close\"\n                >\n                  <X className=\"h-5 w-5\" />\n                </Button>\n              </div>\n            </CardHeader>\n\n            <CardContent className=\"flex-1 overflow-y-auto p-4 space-y-4 max-h-[400px]\">\n              {messages.map((message) => (\n                <div\n                  key={message.id}\n                  className={`flex items-start ${message.type === 'user' ? 'justify-end' : ''}`}\n                  data-testid={`message-${message.id}`}\n                >\n                  {message.type === 'bot' && (\n                    <div className=\"w-8 h-8 bg-purple-600 text-white rounded-full flex items-center justify-center text-sm mr-3\">\n                      <Bot className=\"h-4 w-4\" />\n                    </div>\n                  )}\n                  <div\n                    className={`max-w-xs rounded-lg p-3 ${\n                      message.type === 'bot'\n                        ? 'bg-gray-100 text-slate-800'\n                        : 'bg-purple-600 text-white ml-auto'\n                    }`}\n                  >\n                    <p className=\"text-sm\">{message.content}</p>\n                  </div>\n                  {message.type === 'user' && (\n                    <div className=\"w-8 h-8 bg-gray-300 rounded-full flex items-center justify-center text-sm ml-3\">\n                      <User className=\"h-4 w-4\" />\n                    </div>\n                  )}\n                </div>\n              ))}\n            </CardContent>\n\n            <div className=\"p-4 border-t\">\n              <div className=\"flex space-x-2 mb-3\">\n                <Input\n                  placeholder=\"Type your message...\"\n                  value={inputValue}\n                  onChange={(e) => setInputValue(e.target.value)}\n                  onKeyPress={handleKeyPress}\n                  data-testid=\"chatbot-input\"\n                />\n                <Button\n                  onClick={handleSendMessage}\n                  className=\"bg-purple-600 hover:bg-purple-700\"\n                  data-testid=\"chatbot-send\"\n                >\n                  <Send className=\"h-4 w-4\" />\n                </Button>\n              </div>\n              \n              <div className=\"flex flex-wrap gap-2\">\n                {quickActions.map((action) => (\n                  <Button\n                    key={action.action}\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => handleQuickAction(action.action)}\n                    data-testid={`quick-action-${action.action}`}\n                  >\n                    {action.label}\n                  </Button>\n                ))}\n              </div>\n            </div>\n          </Card>\n        </div>\n      )}\n    </>\n  );\n}\n","size_bytes":7353},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/gallery-item.tsx":{"content":"import { useState } from \"react\";\nimport { Badge } from \"@/components/ui/badge\";\n\ninterface GalleryItemProps {\n  item: {\n    id: string;\n    title: string;\n    description?: string;\n    imageUrl: string;\n    category: string;\n    eventType?: string;\n  };\n}\n\nexport default function GalleryItem({ item }: GalleryItemProps) {\n  const [imageLoaded, setImageLoaded] = useState(false);\n  \n  return (\n    <div \n      className=\"group cursor-pointer relative overflow-hidden rounded-xl shadow-lg\"\n      data-testid={`gallery-item-${item.id}`}\n    >\n      <div className=\"relative\">\n        <img \n          src={item.imageUrl}\n          alt={item.title}\n          className={`w-full h-64 object-cover group-hover:scale-110 transition-transform duration-300 ${\n            imageLoaded ? 'opacity-100' : 'opacity-0'\n          }`}\n          onLoad={() => setImageLoaded(true)}\n          data-testid={`gallery-image-${item.id}`}\n        />\n        {!imageLoaded && (\n          <div className=\"w-full h-64 bg-gray-200 animate-pulse\" />\n        )}\n        <div className=\"absolute inset-0 bg-black bg-opacity-0 group-hover:bg-opacity-30 transition-all duration-300 flex items-end\">\n          <div className=\"p-6 text-white opacity-0 group-hover:opacity-100 transition-opacity duration-300\">\n            <Badge className=\"mb-2\" variant=\"secondary\">{item.category}</Badge>\n            <h4 className=\"font-semibold text-lg mb-1\" data-testid={`gallery-title-${item.id}`}>\n              {item.title}\n            </h4>\n            {item.description && (\n              <p className=\"text-sm\" data-testid={`gallery-description-${item.id}`}>\n                {item.description}\n              </p>\n            )}\n            {item.eventType && (\n              <p className=\"text-sm opacity-75\" data-testid={`gallery-event-type-${item.id}`}>\n                {item.eventType}\n              </p>\n            )}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":1946},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/service-card.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Check } from \"lucide-react\";\n\ninterface ServiceCardProps {\n  service: {\n    id: string;\n    title: string;\n    description: string;\n    icon: any;\n    features: string[];\n    color: string;\n    image: string;\n  };\n}\n\nexport default function ServiceCard({ service }: ServiceCardProps) {\n  const Icon = service.icon;\n  \n  const colorVariants = {\n    primary: \"bg-purple-600\",\n    secondary: \"bg-amber-500\",\n    accent: \"bg-pink-500\",\n  };\n\n  const hoverColorVariants = {\n    primary: \"hover:bg-purple-700\",\n    secondary: \"hover:bg-amber-600\",\n    accent: \"hover:bg-pink-600\",\n  };\n\n  return (\n    <Card className=\"group hover:shadow-2xl transition-all duration-300 overflow-hidden\" data-testid={`service-card-${service.id}`}>\n      <div className=\"relative\">\n        <div \n          className=\"h-64 bg-cover bg-center group-hover:scale-105 transition-transform duration-300\"\n          style={{ backgroundImage: `url(${service.image})` }}\n        />\n        <div className=\"absolute inset-0 bg-black bg-opacity-20 group-hover:bg-opacity-40 transition-all duration-300\" />\n      </div>\n      \n      <CardContent className=\"p-8\">\n        <div className=\"flex items-center mb-4\">\n          <div className={`${colorVariants[service.color as keyof typeof colorVariants]} bg-opacity-10 p-3 rounded-lg mr-4`}>\n            <Icon className={`text-2xl ${\n              service.color === 'primary' ? 'text-purple-600' :\n              service.color === 'secondary' ? 'text-amber-500' :\n              'text-pink-500'\n            }`} />\n          </div>\n          <CardTitle className=\"text-2xl text-slate-800\">{service.title}</CardTitle>\n        </div>\n        \n        <p className=\"text-slate-600 mb-6\">{service.description}</p>\n        \n        <ul className=\"text-sm text-slate-600 mb-6 space-y-2\">\n          {service.features.map((feature, index) => (\n            <li key={index} className=\"flex items-center\">\n              <Check className=\"text-green-500 mr-2 h-4 w-4\" />\n              {feature}\n            </li>\n          ))}\n        </ul>\n        \n        <Button \n          className={`w-full ${colorVariants[service.color as keyof typeof colorVariants]} ${hoverColorVariants[service.color as keyof typeof hoverColorVariants]} text-white font-semibold transition-colors`}\n          data-testid={`button-learn-more-${service.id}`}\n        >\n          Learn More\n        </Button>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":2602},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/components/ui/venue-card.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { MapPin, Users, Star, DollarSign } from \"lucide-react\";\n\ninterface VenueCardProps {\n  venue: {\n    id: string;\n    name: string;\n    description?: string;\n    address: string;\n    city: string;\n    state: string;\n    capacity: number;\n    pricePerDay: string;\n    amenities?: string[];\n    images?: string[];\n    rating: string;\n    reviewCount: number;\n  };\n}\n\nexport default function VenueCard({ venue }: VenueCardProps) {\n  const mainImage = venue.images?.[0] || 'https://images.unsplash.com/photo-1519167758481-83f550bb49b3?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=600';\n  \n  return (\n    <Card className=\"overflow-hidden hover:shadow-lg transition-shadow cursor-pointer\" data-testid={`venue-card-${venue.id}`}>\n      <div className=\"relative\">\n        <img \n          src={mainImage}\n          alt={venue.name}\n          className=\"w-full h-48 object-cover\"\n          data-testid={`venue-image-${venue.id}`}\n        />\n      </div>\n      \n      <CardContent className=\"p-6\">\n        <div className=\"flex items-start justify-between mb-2\">\n          <h3 className=\"font-semibold text-lg text-slate-800 flex-1\" data-testid={`venue-name-${venue.id}`}>\n            {venue.name}\n          </h3>\n          <div className=\"flex items-center text-sm\">\n            <div className=\"flex text-yellow-400 mr-1\">\n              {Array.from({ length: 5 }, (_, i) => (\n                <Star \n                  key={i} \n                  className={`h-4 w-4 ${i < Math.floor(parseFloat(venue.rating)) ? 'fill-current' : ''}`} \n                />\n              ))}\n            </div>\n            <span className=\"text-slate-600\" data-testid={`venue-rating-${venue.id}`}>\n              {venue.rating} ({venue.reviewCount})\n            </span>\n          </div>\n        </div>\n        \n        <div className=\"flex items-center text-sm text-slate-600 mb-2\">\n          <MapPin className=\"h-4 w-4 mr-1\" />\n          <span data-testid={`venue-location-${venue.id}`}>{venue.city}, {venue.state}</span>\n        </div>\n        \n        <div className=\"flex items-center text-sm text-slate-600 mb-4\">\n          <Users className=\"h-4 w-4 mr-1\" />\n          <span data-testid={`venue-capacity-${venue.id}`}>Up to {venue.capacity} guests</span>\n        </div>\n        \n        {venue.description && (\n          <p className=\"text-sm text-slate-600 mb-4 line-clamp-2\" data-testid={`venue-description-${venue.id}`}>\n            {venue.description}\n          </p>\n        )}\n        \n        {venue.amenities && venue.amenities.length > 0 && (\n          <div className=\"flex flex-wrap gap-1 mb-4\">\n            {venue.amenities.slice(0, 3).map((amenity, index) => (\n              <Badge key={index} variant=\"secondary\" className=\"text-xs\">\n                {amenity}\n              </Badge>\n            ))}\n            {venue.amenities.length > 3 && (\n              <Badge variant=\"outline\" className=\"text-xs\">\n                +{venue.amenities.length - 3} more\n              </Badge>\n            )}\n          </div>\n        )}\n        \n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center text-purple-600 font-semibold\">\n            <DollarSign className=\"h-4 w-4 mr-1\" />\n            <span data-testid={`venue-price-${venue.id}`}>From ${venue.pricePerDay}/day</span>\n          </div>\n          <Button size=\"sm\" data-testid={`button-view-venue-${venue.id}`}>\n            View Details\n          </Button>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":3646}}}